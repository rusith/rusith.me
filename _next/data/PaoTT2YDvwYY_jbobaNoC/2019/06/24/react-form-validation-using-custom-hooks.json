{"pageProps":{"post":{"fileName":"2019-06-24-react-form-validation-using-custom-hooks.md","fullPath":"/home/runner/work/rusith.me/rusith.me/modules/blog/posts/2019-06-24-react-form-validation-using-custom-hooks.md","title":"React Form Validation Using Custom Hooks","tags":["web","programming","react","javascript"],"comments":true,"description":"Form validation in react is bit tricky. This is an attempt to make it bit easy by using react hooks. here we write few custom hooks to create a re-usable validation logic that can be used in any form.","dateCreated":"Mon Jun 24 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","dateModified":"Mon Jun 24 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","datePublished":"Mon Jun 24 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","dependencies":"React","about":"A way to create a re-usable form validation logic using React hooks","path":"/blog/react-form-validation-using-custom-hooks","oldPath":"/2019/06/24/react-form-validation-using-custom-hooks","dateCreatedFormatted":"Mon, Jun 24, 2019","fullUrl":"https://rusith.me/blog/react-form-validation-using-custom-hooks","fileContent":"---\ntitle: React Form Validation Using Custom Hooks\ntags: web programming react javascript\ncomments: true\ndescription: Form validation in react is bit tricky. This is an attempt to make it bit easy by using react hooks. here we write few custom hooks to create a re-usable validation logic that can be used in any form.\ndateCreated: 2019-06-24\ndateModified: 2019-06-24\ndatePublished: 2019-06-24\ndependencies: React\nabout: A way to create a re-usable form validation logic using React hooks\npath: /react-form-validation-using-custom-hooks\noldPath: /2019/06/24/react-form-validation-using-custom-hooks\n---\nValidation!\n\nI have this sign-up form here that I want to validate. What do I need to validate? \nFirst, firstName and lastName should be entered! and the email should be a valid one. and the passwords should match and should not be empty.\nOkay, a typical form with typical validation scenarios. the best example in the world (maybe not)\n\nHere you have the source code for my sweet little simple sign up page. no bullshit at all here. I have removed everything and included only the things that are necessary.\n\n```jsx\nimport React, { useState } from 'react'\n\n\nfunction doSignUp(userInfo) {\n  // Go to the server || dispatch an action\n}\n\nexport default function SignUp() {\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [repeatPassword, setRepeatPassword] = useState('')\n\n\n  function handleSignUp() {\n    doSignUp({ firstName, lastName, email, password })\n  }\n\n  return (\n    <div className=\"sign-up\">\n      <input onChange={e => setFirstName(e.target.value)} value={firstName} />\n      <input onChange={e => setLastName(e.target.value)} value={lastName} />\n      <input onChange={e => setEmail(e.target.value)} value={email} />\n      <input type=\"password\" onChange={e => setPassword(e.target.value)} value={password} />\n      <input type=\"password\" onChange={e => setRepeatPassword(e.target.value)} value={repeatPassword} />\n\n      <button onClick={handleSignUp}>Sign me up! </button>\n    </div>\n  )\n}\n```\nI have avoided the form tags and stuff for the sake of simplicity.\n\nIf you press the button on this page it will go to the signUp process and do the thing. If you haven't done any back end validation, you are screwed up.(always do back end validation. never trust your user (yourself in this case)). We don't want this to happen. so we validate and show sweet little messages in the UI.\n\n```jsx\nimport React, { useState } from 'react'\n\n\nfunction doSignUp(userInfo) {\n  // Go to the server || dispatch an action\n}\n\nfunction validateEmail(email) {\n    let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n\nfunction validateForm(values) {\n  const errors = {}\n  if (!values.firstName) errors.firstName = \"First name is required\" // pretty standard error messages. cuz im too lazy to think\n  if (!values.lastName) errors.lastName = \"Last name is required\"\n  if (!values.email) errors.email = \"Email address is required\"\n  else if (!validateEmail(values.email)) errors.email = \"Not a valid email address\"\n  if (!values.password) errors.password = \"Password is required\"\n  else if (!values.repeatPassword) errors.repeatPassword = \"Please repeat the password\"\n  else if (!values.password != values.repeatPassword) errors.repeatPassword = \"Passwords don't match\"\n\n  return errors\n}\n\nexport default function SignUp() {\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [repeatPassword, setRepeatPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n\n  function handleSignUp() {\n    const errors = validateForm({ firstName, lastName, email, password, repeatPassword })\n    setErrors(errors)\n    if (!Object.keys(errors).length) {\n      doSignUp({ firstName, lastName, email, password })\n    }\n  }\n\n  return (\n    <div className=\"sign-up\">\n      <input onChange={e => setFirstName(e.target.value)} value={firstName} />\n      {errors.firstName && <p>{errors.firstName}</p>}\n      <input onChange={e => setLastName(e.target.value)} value={lastName} />\n      {errors.lastName && <p>{errors.lastName}</p>}\n      <input onChange={e => setEmail(e.target.value)} value={email} />\n      {errors.email && <p>{errors.email}</p>}\n      <input type=\"password\" onChange={e => setPassword(e.target.value)} value={password} />\n      {errors.password && <p>{errors.password}</p>}\n      <input type=\"password\" onChange={e => setRepeatPassword(e.target.value)} value={repeatPassword} />\n      {errors.repeatPassword && <p>{errors.repeatPassword}</p>}\n\n      <button onClick={handleSignUp}>Sign me up! </button>\n    </div>\n  )\n}\n```\n\nNow if you press the button it won't do anything and show messages below the inputs. good.\nyou could use something like Formik or some other alternative way to do this validation. But I don't want to load any external library just to validate a few little forms in my app. let's do this ourselves.\n\nOkay, let's see what we can do to improve this code to make it more modular and readable.\n\nYou can see the `onChange` handlers in the input have the same repeating pattern. can't we extract it out and reuse that logic?\nLet's do that now.\n\nLet's create a hook that will get the value from an event and set it\n\n```jsx\n\nfunction useInputValue(initialValue) {\n  const [value, setValue] = useState(initialValue)\n\n  function retrieveValue(event) {\n    setValue(event.target.value)\n  }\n  return [value, retrieveValue]\n}\n\n\nexport default function SignUp() {\n  const [firstName, setFirstName] = useInputValue('')\n  const [lastName, setLastName] = useInputValue('')\n  const [email, setEmail] = useInputValue('')\n  const [password, setPassword] = useInputValue('')\n  const [repeatPassword, setRepeatPassword] = useInputValue('')\n  const [errors, setErrors] = useState({})\n\n\n  function handleSignUp() {\n    const errors = validateForm({ firstName, lastName, email, password, repeatPassword })\n    setErrors(errors)\n    if (!Object.keys(errors).length) {\n      doSignUp({ firstName, lastName, email, password })\n    }\n  }\n\n  return (\n    <div className=\"sign-up\">\n      <input onChange={setFirstName} value={firstName} />\n      {errors.firstName && <p>{errors.firstName}</p>}\n      <input onChange={setLastName} value={lastName} />\n      {errors.lastName && <p>{errors.lastName}</p>}\n      <input onChange={setEmail} value={email} />\n      {errors.email && <p>{errors.email}</p>}\n      <input type=\"password\" onChange={setPassword} value={password} />\n      {errors.password && <p>{errors.password}</p>}\n      <input type=\"password\" onChange={setRepeatPassword} value={repeatPassword} />\n      {errors.repeatPassword && <p>{errors.repeatPassword}</p>}\n\n      <button onClick={handleSignUp}>Sign me up! </button>\n    </div>\n  )\n}\n```\nOkay so far so good. let's now try to remove the repeated state declarations and move them somewhere else. we can create another hook for that.\nThat will look something like below. This is the main hook that we are going to use to create the form. this includes all the logic to run validations when necessary.\n\n```jsx\nfunction useForm(initialValues, validateForm) {\n  if (!initialValues) {\n    throw Error('Initial values are required')\n  }\n\n  const values = {}\n  const valuesWithSetters = {}\n  const [errors, setErrors ] = useState({})\n  const keys =  Object.keys(initialValues)\n\n  for (let i = 0, l = keys.length; i < l; i ++) {\n    const key = keys[i]\n    const [val, setVal] = useInputValue(initialValues[key])\n    const setValWrapper = (...pars) => {\n      if (errors[key]) {\n        const er = {...errors}\n        delete er[key]\n        setErrors(er)\n      }\n      setVal(...pars)\n    }\n    valuesWithSetters[key] = [val, setValWrapper, () => errors[key]]\n    values[key] = val\n  }\n\n  function validate() {\n    const errorObject = {}\n    validateForm(errorObject, values)\n    setErrors(errorObject)\n    return Object.keys(errorObject).length < 1\n  }\n\n  return  [valuesWithSetters, validate, errors, values ]\n}\n```\n\nOkay, what are we doing here? Here we pass a set of initialValue and this hook will create a set of internal states for each key in this object with its value. and what the `validate` function does is it will call the validate function that we provide to the hook and set the error messages automatically.\n\nLet's use this in our code. We will also write a Component that will help us to display the error messages. we will also have to change the `validateForm` function to fit with our hook\n\n```jsx\nfunction validateForm(errors, values) {\n  if (!values.firstName) errors.firstName = \"First name is required\" // pretty standard error messages. cuz im too lazy to think\n  if (!values.lastName) errors.lastName = \"Last name is required\"\n  if (!values.email) errors.email = \"Email address is required\"\n  else if (!validateEmail(values.email)) errors.email = \"Not a valid email address\"\n  if (!values.password) errors.password = \"Password is required\"\n  else if (!values.repeatPassword) errors.repeatPassword = \"Please repeat the password\"\n  else if (values.password != values.repeatPassword) errors.repeatPassword = \"Passwords don't match\"\n}\n\nfunction renderErrorMessage(field) {\n  return <FieldErrorMessage field={field} >{msg => <p className=\"error-messge\">{msg}</p>}</FieldErrorMessage>\n}\n\nexport default function SignUp() {\n  const [{ firstName, lastName, email, password, repeatPassword }, validate, errors, values ]\n    = useForm({ firstName: '', lastName: '', email: '', password: '', repeatPassword: '' }, validateForm)\n\n  function handleSignUp() {\n    const valid = validate()\n    if (valid) {\n      doSignUp(values)\n    }\n  }\n\n  return (\n    <div className=\"sign-up\">\n      <input onChange={firstName[1]} value={firstName[0]} />\n      {renderErrorMessage(firstName)}\n      <input onChange={lastName[1]} value={lastName[0]} />\n      {renderErrorMessage(lastName)}\n      <input onChange={email[1]} value={email[0]} />\n      {renderErrorMessage(email)}\n      <input type=\"password\" onChange={password[1]} value={password[0]} />\n      {renderErrorMessage(password)}\n      <input type=\"password\" onChange={repeatPassword[1]} value={repeatPassword[0]} />\n      {renderErrorMessage(repeatPassword)}\n\n      <button onClick={handleSignUp}>Sign me up! </button>\n    </div>\n  )\n}\n```\n\nOkay. Now the component looks a bit cleaner. now we can move the hooks that we created into another file and we can also move the helper component (`FieldErrorMessage`) to a separate file so we can use it in other components too.\n\nLet's see how we can re-use these things to create a simple login form.\n\n```jsx\nimport React, { useState } from 'react'\nimport { useForm } from './hooks'\nimport FieldErrorMessage from './FieldErrorMessage'\n\n\nfunction doLogin(credentials) {\n  // Go to the server || dispatch an action\n}\n\nfunction validateForm(errors, values) {\n  if (!values.username) errors.username = \"Username is required\" // pretty standard error messages. cuz im too lazy to think\n  if (!values.password) errors.password = \"Password is required\"\n}\n\nfunction renderErrorMessage(field) {\n  return <FieldErrorMessage field={field} >{msg => <p className=\"error-messge\">{msg}</p>}</FieldErrorMessage>\n}\n\nexport default function SignUp() {\n  const [{ username, password }, validate, errors, values ]\n    = useForm({ username: '', password: '' }, validateForm)\n\n  function handleSignUp() {\n    const valid = validate()\n    if (valid) {\n      doLogin(values)\n    }\n  }\n\n  return (\n    <div className=\"sign-up\">\n      <input onChange={username[1]} value={username[0]} />\n      {renderErrorMessage(username)}\n      <input type=\"password\" onChange={password[1]} value={password[0]} />\n      {renderErrorMessage(password)}\n\n      <button onClick={handleSignUp}>Sign me in! </button>\n    </div>\n  )\n}\n```\n\nAnd this is our sign up code using hooks imported \n\n```jsx\nimport React, { useState } from 'react'\nimport { useForm } from './hooks'\nimport FieldErrorMessage from './FieldErrorMessage'\n\n\nfunction doSignUp(userInfo) {\n  // Go to the server || dispatch an action\n}\n\nfunction validateEmail(email) {\n    let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n\nfunction validateForm(errors, values) {\n  if (!values.firstName) errors.firstName = \"First name is required\" // pretty standard error messages. cuz im too lazy to think\n  if (!values.lastName) errors.lastName = \"Last name is required\"\n  if (!values.email) errors.email = \"Email address is required\"\n  else if (!validateEmail(values.email)) errors.email = \"Not a valid email address\"\n  if (!values.password) errors.password = \"Password is required\"\n  else if (!values.repeatPassword) errors.repeatPassword = \"Please repeat the password\"\n  else if (values.password != values.repeatPassword) errors.repeatPassword = \"Passwords don't match\"\n}\n\nfunction renderErrorMessage(field) {\n  return <FieldErrorMessage field={field} >{msg => <p className=\"error-messge\">{msg}</p>}</FieldErrorMessage>\n}\n\nexport default function SignUp() {\n  const [{ firstName, lastName, email, password, repeatPassword }, validate, errors, values ]\n    = useForm({ firstName: '', lastName: '', email: '', password: '', repeatPassword: '' }, validateForm)\n\n  function handleSignUp() {\n    const valid = validate()\n    if (valid) {\n      doSignUp(values)\n    }\n  }\n\n  return (\n    <div className=\"sign-up\">\n      <input onChange={firstName[1]} value={firstName[0]} />\n      {renderErrorMessage(firstName)}\n      <input onChange={lastName[1]} value={lastName[0]} />\n      {renderErrorMessage(lastName)}\n      <input onChange={email[1]} value={email[0]} />\n      {renderErrorMessage(email)}\n      <input type=\"password\" onChange={password[1]} value={password[0]} />\n      {renderErrorMessage(password)}\n      <input type=\"password\" onChange={repeatPassword[1]} value={repeatPassword[0]} />\n      {renderErrorMessage(repeatPassword)}\n\n      <button onClick={handleSignUp}>Sign me up! </button>\n    </div>\n  )\n}\n```\n\nCertainly, this is not the best solution for this validation problem but its, something that works 😉.","parsedContent":"<p>Validation!</p>\n<p>I have this sign-up form here that I want to validate. What do I need to validate? \nFirst, firstName and lastName should be entered! and the email should be a valid one. and the passwords should match and should not be empty.\nOkay, a typical form with typical validation scenarios. the best example in the world (maybe not)</p>\n<p>Here you have the source code for my sweet little simple sign up page. no bullshit at all here. I have removed everything and included only the things that are necessary.</p>\n<pre><code class=\"hljs jsx language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSignUp</span>(<span class=\"hljs-params\">userInfo</span>) {\n  <span class=\"hljs-comment\">// Go to the server || dispatch an action</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SignUp</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [firstName, setFirstName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [lastName, setLastName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [password, setPassword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [repeatPassword, setRepeatPassword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleSignUp</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">doSignUp</span>({ firstName, lastName, email, password })\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;sign-up&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setFirstName(e.target.value)} value={firstName} /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setLastName(e.target.value)} value={lastName} /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setEmail(e.target.value)} value={email} /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setPassword(e.target.value)} value={password} /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setRepeatPassword(e.target.value)} value={repeatPassword} /&gt;\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSignUp}</span>&gt;</span>Sign me up! <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>I have avoided the form tags and stuff for the sake of simplicity.</p>\n<p>If you press the button on this page it will go to the signUp process and do the thing. If you haven't done any back end validation, you are screwed up.(always do back end validation. never trust your user (yourself in this case)). We don't want this to happen. so we validate and show sweet little messages in the UI.</p>\n<pre><code class=\"hljs jsx language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSignUp</span>(<span class=\"hljs-params\">userInfo</span>) {\n  <span class=\"hljs-comment\">// Go to the server || dispatch an action</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateEmail</span>(<span class=\"hljs-params\">email</span>) {\n    <span class=\"hljs-keyword\">let</span> re = <span class=\"hljs-regexp\">/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/</span>;\n    <span class=\"hljs-keyword\">return</span> re.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-title class_\">String</span>(email).<span class=\"hljs-title function_\">toLowerCase</span>());\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateForm</span>(<span class=\"hljs-params\">values</span>) {\n  <span class=\"hljs-keyword\">const</span> errors = {}\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">firstName</span>) errors.<span class=\"hljs-property\">firstName</span> = <span class=\"hljs-string\">&quot;First name is required&quot;</span> <span class=\"hljs-comment\">// pretty standard error messages. cuz im too lazy to think</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">lastName</span>) errors.<span class=\"hljs-property\">lastName</span> = <span class=\"hljs-string\">&quot;Last name is required&quot;</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">email</span>) errors.<span class=\"hljs-property\">email</span> = <span class=\"hljs-string\">&quot;Email address is required&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">validateEmail</span>(values.<span class=\"hljs-property\">email</span>)) errors.<span class=\"hljs-property\">email</span> = <span class=\"hljs-string\">&quot;Not a valid email address&quot;</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">password</span>) errors.<span class=\"hljs-property\">password</span> = <span class=\"hljs-string\">&quot;Password is required&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">repeatPassword</span>) errors.<span class=\"hljs-property\">repeatPassword</span> = <span class=\"hljs-string\">&quot;Please repeat the password&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">password</span> != values.<span class=\"hljs-property\">repeatPassword</span>) errors.<span class=\"hljs-property\">repeatPassword</span> = <span class=\"hljs-string\">&quot;Passwords don&#x27;t match&quot;</span>\n\n  <span class=\"hljs-keyword\">return</span> errors\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SignUp</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [firstName, setFirstName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [lastName, setLastName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [password, setPassword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [repeatPassword, setRepeatPassword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [errors, setErrors] = <span class=\"hljs-title function_\">useState</span>({})\n\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleSignUp</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> errors = <span class=\"hljs-title function_\">validateForm</span>({ firstName, lastName, email, password, repeatPassword })\n    <span class=\"hljs-title function_\">setErrors</span>(errors)\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(errors).<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-title function_\">doSignUp</span>({ firstName, lastName, email, password })\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;sign-up&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setFirstName(e.target.value)} value={firstName} /&gt;\n      {errors.firstName &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.firstName}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setLastName(e.target.value)} value={lastName} /&gt;\n      {errors.lastName &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.lastName}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setEmail(e.target.value)} value={email} /&gt;\n      {errors.email &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.email}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setPassword(e.target.value)} value={password} /&gt;\n      {errors.password &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.password}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setRepeatPassword(e.target.value)} value={repeatPassword} /&gt;\n      {errors.repeatPassword &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.repeatPassword}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSignUp}</span>&gt;</span>Sign me up! <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>Now if you press the button it won't do anything and show messages below the inputs. good.\nyou could use something like Formik or some other alternative way to do this validation. But I don't want to load any external library just to validate a few little forms in my app. let's do this ourselves.</p>\n<p>Okay, let's see what we can do to improve this code to make it more modular and readable.</p>\n<p>You can see the <code>onChange</code> handlers in the input have the same repeating pattern. can't we extract it out and reuse that logic?\nLet's do that now.</p>\n<p>Let's create a hook that will get the value from an event and set it</p>\n<pre><code class=\"hljs jsx language-jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-params\">initialValue</span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(initialValue)\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">retrieveValue</span>(<span class=\"hljs-params\">event</span>) {\n    <span class=\"hljs-title function_\">setValue</span>(event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)\n  }\n  <span class=\"hljs-keyword\">return</span> [value, retrieveValue]\n}\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SignUp</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [firstName, setFirstName] = <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [lastName, setLastName] = <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [password, setPassword] = <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [repeatPassword, setRepeatPassword] = <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  <span class=\"hljs-keyword\">const</span> [errors, setErrors] = <span class=\"hljs-title function_\">useState</span>({})\n\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleSignUp</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> errors = <span class=\"hljs-title function_\">validateForm</span>({ firstName, lastName, email, password, repeatPassword })\n    <span class=\"hljs-title function_\">setErrors</span>(errors)\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(errors).<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-title function_\">doSignUp</span>({ firstName, lastName, email, password })\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;sign-up&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setFirstName}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{firstName}</span> /&gt;</span>\n      {errors.firstName &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.firstName}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setLastName}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{lastName}</span> /&gt;</span>\n      {errors.lastName &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.lastName}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setEmail}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{email}</span> /&gt;</span>\n      {errors.email &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.email}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setPassword}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{password}</span> /&gt;</span>\n      {errors.password &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.password}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setRepeatPassword}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{repeatPassword}</span> /&gt;</span>\n      {errors.repeatPassword &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{errors.repeatPassword}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSignUp}</span>&gt;</span>Sign me up! <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>Okay so far so good. let's now try to remove the repeated state declarations and move them somewhere else. we can create another hook for that.\nThat will look something like below. This is the main hook that we are going to use to create the form. this includes all the logic to run validations when necessary.</p>\n<pre><code class=\"hljs jsx language-jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useForm</span>(<span class=\"hljs-params\">initialValues, validateForm</span>) {\n  <span class=\"hljs-keyword\">if</span> (!initialValues) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Initial values are required&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">const</span> values = {}\n  <span class=\"hljs-keyword\">const</span> valuesWithSetters = {}\n  <span class=\"hljs-keyword\">const</span> [errors, setErrors ] = <span class=\"hljs-title function_\">useState</span>({})\n  <span class=\"hljs-keyword\">const</span> keys =  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(initialValues)\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, l = keys.<span class=\"hljs-property\">length</span>; i &lt; l; i ++) {\n    <span class=\"hljs-keyword\">const</span> key = keys[i]\n    <span class=\"hljs-keyword\">const</span> [val, setVal] = <span class=\"hljs-title function_\">useInputValue</span>(initialValues[key])\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setValWrapper</span> = (<span class=\"hljs-params\">...pars</span>) =&gt; {\n      <span class=\"hljs-keyword\">if</span> (errors[key]) {\n        <span class=\"hljs-keyword\">const</span> er = {...errors}\n        <span class=\"hljs-keyword\">delete</span> er[key]\n        <span class=\"hljs-title function_\">setErrors</span>(er)\n      }\n      <span class=\"hljs-title function_\">setVal</span>(...pars)\n    }\n    valuesWithSetters[key] = [val, setValWrapper, <span class=\"hljs-function\">() =&gt;</span> errors[key]]\n    values[key] = val\n  }\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> errorObject = {}\n    <span class=\"hljs-title function_\">validateForm</span>(errorObject, values)\n    <span class=\"hljs-title function_\">setErrors</span>(errorObject)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(errorObject).<span class=\"hljs-property\">length</span> &lt; <span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span>  [valuesWithSetters, validate, errors, values ]\n}\n</code></pre>\n<p>Okay, what are we doing here? Here we pass a set of initialValue and this hook will create a set of internal states for each key in this object with its value. and what the <code>validate</code> function does is it will call the validate function that we provide to the hook and set the error messages automatically.</p>\n<p>Let's use this in our code. We will also write a Component that will help us to display the error messages. we will also have to change the <code>validateForm</code> function to fit with our hook</p>\n<pre><code class=\"hljs jsx language-jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateForm</span>(<span class=\"hljs-params\">errors, values</span>) {\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">firstName</span>) errors.<span class=\"hljs-property\">firstName</span> = <span class=\"hljs-string\">&quot;First name is required&quot;</span> <span class=\"hljs-comment\">// pretty standard error messages. cuz im too lazy to think</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">lastName</span>) errors.<span class=\"hljs-property\">lastName</span> = <span class=\"hljs-string\">&quot;Last name is required&quot;</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">email</span>) errors.<span class=\"hljs-property\">email</span> = <span class=\"hljs-string\">&quot;Email address is required&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">validateEmail</span>(values.<span class=\"hljs-property\">email</span>)) errors.<span class=\"hljs-property\">email</span> = <span class=\"hljs-string\">&quot;Not a valid email address&quot;</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">password</span>) errors.<span class=\"hljs-property\">password</span> = <span class=\"hljs-string\">&quot;Password is required&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">repeatPassword</span>) errors.<span class=\"hljs-property\">repeatPassword</span> = <span class=\"hljs-string\">&quot;Please repeat the password&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (values.<span class=\"hljs-property\">password</span> != values.<span class=\"hljs-property\">repeatPassword</span>) errors.<span class=\"hljs-property\">repeatPassword</span> = <span class=\"hljs-string\">&quot;Passwords don&#x27;t match&quot;</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">renderErrorMessage</span>(<span class=\"hljs-params\">field</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FieldErrorMessage</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">{field}</span> &gt;</span>{msg =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;error-messge&quot;</span>&gt;</span>{msg}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FieldErrorMessage</span>&gt;</span></span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SignUp</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [{ firstName, lastName, email, password, repeatPassword }, validate, errors, values ]\n    = <span class=\"hljs-title function_\">useForm</span>({ <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">repeatPassword</span>: <span class=\"hljs-string\">&#x27;&#x27;</span> }, validateForm)\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleSignUp</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> valid = <span class=\"hljs-title function_\">validate</span>()\n    <span class=\"hljs-keyword\">if</span> (valid) {\n      <span class=\"hljs-title function_\">doSignUp</span>(values)\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;sign-up&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{firstName[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{firstName[0]}</span> /&gt;</span>\n      {renderErrorMessage(firstName)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{lastName[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{lastName[0]}</span> /&gt;</span>\n      {renderErrorMessage(lastName)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{email[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{email[0]}</span> /&gt;</span>\n      {renderErrorMessage(email)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{password[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{password[0]}</span> /&gt;</span>\n      {renderErrorMessage(password)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{repeatPassword[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{repeatPassword[0]}</span> /&gt;</span>\n      {renderErrorMessage(repeatPassword)}\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSignUp}</span>&gt;</span>Sign me up! <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>Okay. Now the component looks a bit cleaner. now we can move the hooks that we created into another file and we can also move the helper component (<code>FieldErrorMessage</code>) to a separate file so we can use it in other components too.</p>\n<p>Let's see how we can re-use these things to create a simple login form.</p>\n<pre><code class=\"hljs jsx language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { useForm } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./hooks&#x27;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">FieldErrorMessage</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./FieldErrorMessage&#x27;</span>\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doLogin</span>(<span class=\"hljs-params\">credentials</span>) {\n  <span class=\"hljs-comment\">// Go to the server || dispatch an action</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateForm</span>(<span class=\"hljs-params\">errors, values</span>) {\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">username</span>) errors.<span class=\"hljs-property\">username</span> = <span class=\"hljs-string\">&quot;Username is required&quot;</span> <span class=\"hljs-comment\">// pretty standard error messages. cuz im too lazy to think</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">password</span>) errors.<span class=\"hljs-property\">password</span> = <span class=\"hljs-string\">&quot;Password is required&quot;</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">renderErrorMessage</span>(<span class=\"hljs-params\">field</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FieldErrorMessage</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">{field}</span> &gt;</span>{msg =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;error-messge&quot;</span>&gt;</span>{msg}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FieldErrorMessage</span>&gt;</span></span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SignUp</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [{ username, password }, validate, errors, values ]\n    = <span class=\"hljs-title function_\">useForm</span>({ <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span> }, validateForm)\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleSignUp</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> valid = <span class=\"hljs-title function_\">validate</span>()\n    <span class=\"hljs-keyword\">if</span> (valid) {\n      <span class=\"hljs-title function_\">doLogin</span>(values)\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;sign-up&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{username[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{username[0]}</span> /&gt;</span>\n      {renderErrorMessage(username)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{password[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{password[0]}</span> /&gt;</span>\n      {renderErrorMessage(password)}\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSignUp}</span>&gt;</span>Sign me in! <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>And this is our sign up code using hooks imported </p>\n<pre><code class=\"hljs jsx language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { useForm } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./hooks&#x27;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">FieldErrorMessage</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./FieldErrorMessage&#x27;</span>\n\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSignUp</span>(<span class=\"hljs-params\">userInfo</span>) {\n  <span class=\"hljs-comment\">// Go to the server || dispatch an action</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateEmail</span>(<span class=\"hljs-params\">email</span>) {\n    <span class=\"hljs-keyword\">let</span> re = <span class=\"hljs-regexp\">/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/</span>;\n    <span class=\"hljs-keyword\">return</span> re.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-title class_\">String</span>(email).<span class=\"hljs-title function_\">toLowerCase</span>());\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateForm</span>(<span class=\"hljs-params\">errors, values</span>) {\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">firstName</span>) errors.<span class=\"hljs-property\">firstName</span> = <span class=\"hljs-string\">&quot;First name is required&quot;</span> <span class=\"hljs-comment\">// pretty standard error messages. cuz im too lazy to think</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">lastName</span>) errors.<span class=\"hljs-property\">lastName</span> = <span class=\"hljs-string\">&quot;Last name is required&quot;</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">email</span>) errors.<span class=\"hljs-property\">email</span> = <span class=\"hljs-string\">&quot;Email address is required&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">validateEmail</span>(values.<span class=\"hljs-property\">email</span>)) errors.<span class=\"hljs-property\">email</span> = <span class=\"hljs-string\">&quot;Not a valid email address&quot;</span>\n  <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">password</span>) errors.<span class=\"hljs-property\">password</span> = <span class=\"hljs-string\">&quot;Password is required&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!values.<span class=\"hljs-property\">repeatPassword</span>) errors.<span class=\"hljs-property\">repeatPassword</span> = <span class=\"hljs-string\">&quot;Please repeat the password&quot;</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (values.<span class=\"hljs-property\">password</span> != values.<span class=\"hljs-property\">repeatPassword</span>) errors.<span class=\"hljs-property\">repeatPassword</span> = <span class=\"hljs-string\">&quot;Passwords don&#x27;t match&quot;</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">renderErrorMessage</span>(<span class=\"hljs-params\">field</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FieldErrorMessage</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">{field}</span> &gt;</span>{msg =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;error-messge&quot;</span>&gt;</span>{msg}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FieldErrorMessage</span>&gt;</span></span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SignUp</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [{ firstName, lastName, email, password, repeatPassword }, validate, errors, values ]\n    = <span class=\"hljs-title function_\">useForm</span>({ <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">repeatPassword</span>: <span class=\"hljs-string\">&#x27;&#x27;</span> }, validateForm)\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleSignUp</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> valid = <span class=\"hljs-title function_\">validate</span>()\n    <span class=\"hljs-keyword\">if</span> (valid) {\n      <span class=\"hljs-title function_\">doSignUp</span>(values)\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;sign-up&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{firstName[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{firstName[0]}</span> /&gt;</span>\n      {renderErrorMessage(firstName)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{lastName[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{lastName[0]}</span> /&gt;</span>\n      {renderErrorMessage(lastName)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{email[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{email[0]}</span> /&gt;</span>\n      {renderErrorMessage(email)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{password[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{password[0]}</span> /&gt;</span>\n      {renderErrorMessage(password)}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{repeatPassword[1]}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{repeatPassword[0]}</span> /&gt;</span>\n      {renderErrorMessage(repeatPassword)}\n\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSignUp}</span>&gt;</span>Sign me up! <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>Certainly, this is not the best solution for this validation problem but its, something that works 😉.</p>"},"page":"Post","topTags":["programming","aws","web","machineLearning","react","javascript","dataScience","typescript","r","csharp"],"relatedPosts":[{"title":"Testing Redux Connected React Components Using Jest","tags":["programming","javascript","react","redux","testing","jest"],"fullUrl":"https://rusith.me/blog/testing-react-redux-connected-components-using-jest","date":"Mon, Apr 27, 2020","description":"Testing React components connected to a Redux store using Jest and React Testing Library.","banner":"/post-data/2020-04-27-testing-redux-connect/banner.png"},{"title":"A Service Gateway Using NodeJS","tags":["programming","javascript","micro-service","web"],"fullUrl":"https://rusith.me/blog/node-js-service-gateway","date":"Thu, Mar 15, 2018","description":"In this post I am writing a simple and minimal service gateway using JavaScript and NodeJS which can handle authentication , authorization.","banner":null},{"title":"Deploying an app on AWS ECS with CDK","tags":["programming","nextJS","react","aws","ecs","typescript","cdk","devops"],"fullUrl":"https://rusith.me/blog/deploy-app-on-aws-ecs-with-cdk-auto-scaling-and-load-balancing","date":"Wed, Feb 15, 2023","description":"How to deploy an application on AWS ECS with load-balancing and auto-scaling using CDK by writing the CDK code in TypeScript","banner":"/post-data/2023-02-15-deploying-react-app-on-ecs/banner.png"}]},"__N_SSG":true}