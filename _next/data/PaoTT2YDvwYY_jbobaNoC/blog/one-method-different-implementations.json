{"pageProps":{"post":{"fileName":"2018-08-04-one-method-different-implementations.md","fullPath":"/home/runner/work/rusith.me/rusith.me/modules/blog/posts/2018-08-04-one-method-different-implementations.md","title":"One Method, Different Implementations","tags":["programming","csharp"],"comments":true,"description":"We can set Func<>s as properties, so people can call them just like methods, and we can change the function from the constructor according to the user's needs. in this example, I am creating a class which has few methods to download data, the user of the class can decide whether they should cache the results or not","dateCreated":"Sat Aug 04 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","dateModified":"Sat Aug 04 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","datePublished":"Sat Aug 04 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","dependencies":".Net","about":"Changing implementation of methods of a class at runtime in C#","path":"/blog/one-method-different-implementations","oldPath":"/2018/08/04/one-method-different-implementations","dateCreatedFormatted":"Sat, Aug 4, 2018","fullUrl":"https://rusith.me/blog/one-method-different-implementations","fileContent":"---\ntitle: One Method, Different Implementations\ntags: programming csharp\ncomments: true\ndescription: We can set Func<>s as properties, so people can call them just like methods, and we can change the function from the constructor according to the user's needs. in this example, I am creating a class which has few methods to download data, the user of the class can decide whether they should cache the results or not\ndateCreated: 2018-08-04\ndateModified: 2018-08-04\ndatePublished: 2018-08-04\ndependencies: .Net\nabout: Changing implementation of methods of a class at runtime in C#\npath: /one-method-different-implementations\noldPath: /2018/08/04/one-method-different-implementations\n---\n\nWell, these are not actually methods, we set Func<>s as properties, so people can call them just like methods, and we can change the function from the constructor according to the user's needs. in this example, I am creating a class which has few methods to download data, the user of the class can decide whether they should cache the results or not.\nThis may have limitations. but this could be useful in some scenarios.\nHere's the code\n\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing Newtonsoft.Json;\nusing Xunit;\nusing static Xunit.Assert;\n\nnamespace MyApp.Tests.Experiments\n{\n    public class Model\n    {\n        public string JsonFor { get; set; }\n    }\n\n    /// <summary>\n    /// This thing can download things (synchronous [bad, but who cares])\n    /// </summary>\n    public sealed class Downloader\n    {\n        /// <summary>\n        /// This function takes a function and returns a function which caches  the results of the given function\n        /// </summary>\n        /// <typeparam name=\"TIn\">Input type</typeparam>\n        /// <typeparam name=\"TOut\">Output type</typeparam>\n        /// <param name=\"func\">function</param>\n        /// <returns></returns>\n        private static Func<TIn, TOut> Cache<TIn, TOut>(Func<TIn, TOut> func)\n        {\n            var cache = new Dictionary<TIn, TOut>();\n            return key => cache.ContainsKey(key) ? cache[key] : cache[key] = func(key);\n        }\n\n        public Downloader(bool cached)\n        {\n            if (!cached) return;\n\n            /* If the user wants this to be cached, we send the properties through the Cache function */\n            DownloadWebPage = Cache(DownloadWebPage);\n            DownloadJson = Cache(DownloadJson);\n        }\n\n        /// <summary>\n        /// Download HTML from a URI (not tested)\n        /// </summary>\n        public Func<string, string> DownloadWebPage { get; } = (uri) =>\n        {\n            using (var wc = new WebClient())\n            {\n                return wc.DownloadString(uri);\n            }\n        };\n\n        /// <summary>\n        /// Download JSON (fake because i didn't have an internet connection when writing this)\n        /// </summary>\n        public Func<string, Model> DownloadJson { get; } = uri => JsonConvert.DeserializeObject<Model>(\n            \"{'jsonFor': '+ \" + url + \" +', 'data': {}}\".Replace('\\'', '\"'));\n    }\n\n\n    /// <summary>\n    /// Some tests\n    /// </summary>\n    public class DownloaderTests\n    {\n        [Fact]\n        public void DownloadJson_Should_Download_Json()\n        {\n            var downloader = new Downloader(false);\n            var obj = downloader.DownloadJson(\"URLTOJSON\");\n            Equal(\"URLTOJSON\", obj.JsonFor);\n        }\n\n        [Fact]\n        public void DownloadJson_Should_Cache_Object_If_Cached()\n        {\n            var downloader = new Downloader(true);\n            var objOne = downloader.DownloadJson(\"URLTOJSON\");\n            var objTwo = downloader.DownloadJson(\"URLTOJSON\");\n            var objThree = downloader.DownloadJson(\"URLTOJSON\");\n            var obj4 = downloader.DownloadJson(\"URLTOJSON1\");\n\n            Equal(objOne, objTwo);\n            Equal(objTwo, objThree);\n            NotEqual(objThree, obj4); // Should be in a seperate test\n        }\n    }\n}\n```\n","parsedContent":"<p>Well, these are not actually methods, we set Func&lt;&gt;s as properties, so people can call them just like methods, and we can change the function from the constructor according to the user's needs. in this example, I am creating a class which has few methods to download data, the user of the class can decide whether they should cache the results or not.\nThis may have limitations. but this could be useful in some scenarios.\nHere's the code</p>\n<pre><code class=\"hljs cs language-cs\"><span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Net;\n<span class=\"hljs-keyword\">using</span> Newtonsoft.Json;\n<span class=\"hljs-keyword\">using</span> Xunit;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">static</span> Xunit.Assert;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">MyApp.Tests.Experiments</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Model</span>\n    {\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> JsonFor { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    }\n\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> This thing can download things (synchronous [bad, but who cares])</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">sealed</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Downloader</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> This function takes a function and returns a function which caches  the results of the given function</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;TIn&quot;&gt;</span>Input type<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;TOut&quot;&gt;</span>Output type<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;func&quot;&gt;</span>function<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span><span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">Func</span>&lt;<span class=\"hljs-title\">TIn</span>, <span class=\"hljs-title\">TOut</span>&gt; <span class=\"hljs-title\">Cache</span>&lt;<span class=\"hljs-title\">TIn</span>, <span class=\"hljs-title\">TOut</span>&gt;(<span class=\"hljs-params\">Func&lt;TIn, TOut&gt; func</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> cache = <span class=\"hljs-keyword\">new</span> Dictionary&lt;TIn, TOut&gt;();\n            <span class=\"hljs-keyword\">return</span> key =&gt; cache.ContainsKey(key) ? cache[key] : cache[key] = func(key);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Downloader</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span> cached</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (!cached) <span class=\"hljs-keyword\">return</span>;\n\n            <span class=\"hljs-comment\">/* If the user wants this to be cached, we send the properties through the Cache function */</span>\n            DownloadWebPage = Cache(DownloadWebPage);\n            DownloadJson = Cache(DownloadJson);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Download HTML from a URI (not tested)</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> Func&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt; DownloadWebPage { <span class=\"hljs-keyword\">get</span>; } = (uri) =&gt;\n        {\n            <span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> wc = <span class=\"hljs-keyword\">new</span> WebClient())\n            {\n                <span class=\"hljs-keyword\">return</span> wc.DownloadString(uri);\n            }\n        };\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Download JSON (fake because i didn&#x27;t have an internet connection when writing this)</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> Func&lt;<span class=\"hljs-built_in\">string</span>, Model&gt; DownloadJson { <span class=\"hljs-keyword\">get</span>; } = uri =&gt; JsonConvert.DeserializeObject&lt;Model&gt;(\n            <span class=\"hljs-string\">&quot;{&#x27;jsonFor&#x27;: &#x27;+ &quot;</span> + url + <span class=\"hljs-string\">&quot; +&#x27;, &#x27;data&#x27;: {}}&quot;</span>.Replace(<span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;&quot;&#x27;</span>));\n    }\n\n\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Some tests</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DownloaderTests</span>\n    {\n        [<span class=\"hljs-meta\">Fact</span>]\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DownloadJson_Should_Download_Json</span>()</span>\n        {\n            <span class=\"hljs-keyword\">var</span> downloader = <span class=\"hljs-keyword\">new</span> Downloader(<span class=\"hljs-literal\">false</span>);\n            <span class=\"hljs-keyword\">var</span> obj = downloader.DownloadJson(<span class=\"hljs-string\">&quot;URLTOJSON&quot;</span>);\n            Equal(<span class=\"hljs-string\">&quot;URLTOJSON&quot;</span>, obj.JsonFor);\n        }\n\n        [<span class=\"hljs-meta\">Fact</span>]\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DownloadJson_Should_Cache_Object_If_Cached</span>()</span>\n        {\n            <span class=\"hljs-keyword\">var</span> downloader = <span class=\"hljs-keyword\">new</span> Downloader(<span class=\"hljs-literal\">true</span>);\n            <span class=\"hljs-keyword\">var</span> objOne = downloader.DownloadJson(<span class=\"hljs-string\">&quot;URLTOJSON&quot;</span>);\n            <span class=\"hljs-keyword\">var</span> objTwo = downloader.DownloadJson(<span class=\"hljs-string\">&quot;URLTOJSON&quot;</span>);\n            <span class=\"hljs-keyword\">var</span> objThree = downloader.DownloadJson(<span class=\"hljs-string\">&quot;URLTOJSON&quot;</span>);\n            <span class=\"hljs-keyword\">var</span> obj4 = downloader.DownloadJson(<span class=\"hljs-string\">&quot;URLTOJSON1&quot;</span>);\n\n            Equal(objOne, objTwo);\n            Equal(objTwo, objThree);\n            NotEqual(objThree, obj4); <span class=\"hljs-comment\">// Should be in a seperate test</span>\n        }\n    }\n}\n</code></pre>"},"page":"Post","topTags":["programming","aws","web","machineLearning","react","javascript","dataScience","typescript","r","csharp"],"relatedPosts":[{"title":"Genie - An Efficient Way to Access Data","tags":["programming","csharp","genie","rdbms"],"fullUrl":"https://rusith.me/blog/genie-an-efficient-way-to-access-data","date":"Thu, Mar 15, 2018","description":"Almost all the time we need a database to run our apps. most of the time, these databases are relational databases. as everyone knows we must use SQL to access these databases. writing an SQL query for every database call is a pain and no one does that these days. instead, we use something called ORMs (Object Relational Mappers). we can use an ORM to access databases without writing SQL or worrying about mapping relations to objects. there are a lot of ORM implementations for every popular language.","banner":null},{"title":"Deploying an app on AWS ECS with CDK","tags":["programming","nextJS","react","aws","ecs","typescript","cdk","devops"],"fullUrl":"https://rusith.me/blog/deploy-app-on-aws-ecs-with-cdk-auto-scaling-and-load-balancing","date":"Wed, Feb 15, 2023","description":"How to deploy an application on AWS ECS with load-balancing and auto-scaling using CDK by writing the CDK code in TypeScript","banner":"/post-data/2023-02-15-deploying-react-app-on-ecs/banner.png"},{"title":"Testing Redux Connected React Components Using Jest","tags":["programming","javascript","react","redux","testing","jest"],"fullUrl":"https://rusith.me/blog/testing-react-redux-connected-components-using-jest","date":"Mon, Apr 27, 2020","description":"Testing React components connected to a Redux store using Jest and React Testing Library.","banner":"/post-data/2020-04-27-testing-redux-connect/banner.png"}]},"__N_SSG":true}