{"pageProps":{"post":{"fileName":"2019-02-21-ffmpeg-in-lambda.md","fullPath":"/home/runner/work/rusith.me/rusith.me/modules/blog/posts/2019-02-21-ffmpeg-in-lambda.md","title":"Running FFmpeg in AWS Lambda using NodeJS","tags":["programming","aws","lambda"],"comments":true,"description":"When you have a requirement to do something on video/ audio files, the tool of choice would be FFmpeg which is free and open source. In this post I go through a way you can setup FFmpeg in AWS Lambda.","dateCreated":"Thu Feb 21 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","dateModified":"Thu Feb 21 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","datePublished":"Thu Feb 21 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","dependencies":"AWS","about":"Running FFmpeg in AWS Lambda","path":"/blog/ffmpeg-in-lambda","oldPath":"/2019/02/21/ffmpeg-in-lambda","dateCreatedFormatted":"Thu, Feb 21, 2019","fullUrl":"https://rusith.me/blog/ffmpeg-in-lambda","fileContent":"---\ntitle: Running FFmpeg in AWS Lambda using NodeJS\ntags: programming aws lambda\ncomments: true\ndescription: When you have a requirement to do something on video/ audio files, the tool of choice would be FFmpeg which is free and open source. In this post I go through a way you can setup FFmpeg in AWS Lambda.\ndateCreated: 2019-02-21\ndateModified: 2019-02-21\ndatePublished: 2019-02-21\ndependencies: AWS\nabout: Running FFmpeg in AWS Lambda\npath: /ffmpeg-in-lambda\noldPath: /2019/02/21/ffmpeg-in-lambda\n---\n\nOkay, no drama. let’s get right to the point.\n\nWhen you have a requirement to do something on video/ audio files, the tool of choice would be FFmpeg which is free and open source.\n\nWhat if you want to run FFmpeg from a Lambda function?\n\nIn that case, you will face some problems,\n\n1. Need to find an executable Which works on the Lambda server.\n2. Copy the FFmpeg to the `/tmp` folder when you are going to execute it because you can’t execute anything from anywhere other than `/tmp` folder in Lambda.\n3. You will have to give necessary permissions to execute FFmpeg from `/tmp` folder\n\n## Finding a build\n\nTo run FFmpeg you have to have a build that is compatible with the Lambda environment. after much searching, I found this **[website](https://johnvansickle.com/ffmpeg/)** by this [cool dude](https://www.patreon.com/johnvansickle), Where he has listed a set of static builds of FFmpeg for different environments. You can download [FFmpeg-release-amd64-static.tar.xz](https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz) file which is the one matches the Lambda machine and extract it inside your Lambda function package.\n\nThe package folder will look like something like this after extracting FFmpeg\n\n<img alt=\"How folder structure looks like after extracting FFmpeg\" src=\"$$base_url/post-data/2019-02-21-ffmpeg-in-lambda/file-structure.png\" >\n\n## Running It\n\nYou will need to have chmod and ncp installed to run this code. Run `npm install chmod ncp — save` to install the packages.\n\nLet’s jump right into a code which executes FFmpeg.\n\n```js\nconst exec = require(\"child_process\").execFile\nconst { ncp } = require(\"ncp\")\nconst path = require(\"path\")\nconst chmod = require(\"chmod\")\n\nexports.mux = async (audioFile, videoFile, muxedFile) =>\n  new Promise((resolve, reject) => {\n    /*\n    We can't run the ffmpeg from the current folder because it is read only.\n    in Lambda all locations except /tmp are read only.\n    So I had to copy the ffmpeg to the temp folder and give it execute permissions to make it work\n   */\n    // ncp will copy the whole directory to /tmp/ffmpeg\n    ncp(\n      path.join(__dirname, \"../ffmpeg/\"),\n      \"/tmp/ffmpeg\",\n      {\n        clobber: false, // Do not overwrite if already exists (Lambda sometimes re-uses the container)\n      },\n      (err) => {\n        if (err) {\n          reject(err)\n        } else {\n          // Give execute permissions to the ffmpeg\n          chmod(\"/tmp/ffmpeg/ffmpeg\", {\n            execute: true,\n          })\n\n          // Muxing an audio file and a video file into one video file\n          // This could be any operation on FFmpeg, you just have to give the parameters correctly.\n          exec(\n            \"/tmp/ffmpeg/ffmpeg\",\n            [\n              \"-y\",\n              \"-i\",\n              videoFile,\n              \"-i\",\n              audioFile,\n              \"-map\",\n              \" 0:0\",\n              \"-map\",\n              \"1:0\",\n              \"-c\",\n              \"copy\",\n              muxedFile,\n            ],\n            {},\n            (error, stdout) => {\n              if (error) {\n                reject(error)\n              } else {\n                resolve(stdout)\n              }\n            }\n          )\n        }\n      }\n    )\n  })\n```\n\nIn here I am trying to merge two files into one. This could be any other operation. The first thing we do here is copying the FFmpeg folder to the tmp folder, then we give the execute permission to the FFmpeg file using the chmod node package.\n\nYou get the idea. You can even speed up the process by just copying the archive itself into the package and extracting it to the temp folder in Lambda.\n","parsedContent":"<p>Okay, no drama. let’s get right to the point.</p>\n<p>When you have a requirement to do something on video/ audio files, the tool of choice would be FFmpeg which is free and open source.</p>\n<p>What if you want to run FFmpeg from a Lambda function?</p>\n<p>In that case, you will face some problems,</p>\n<ol>\n<li>Need to find an executable Which works on the Lambda server.</li>\n<li>Copy the FFmpeg to the <code>/tmp</code> folder when you are going to execute it because you can’t execute anything from anywhere other than <code>/tmp</code> folder in Lambda.</li>\n<li>You will have to give necessary permissions to execute FFmpeg from <code>/tmp</code> folder</li>\n</ol>\n<h2 id=\"findingabuild\">Finding a build</h2>\n<p>To run FFmpeg you have to have a build that is compatible with the Lambda environment. after much searching, I found this <strong><a href=\"https://johnvansickle.com/ffmpeg/\">website</a></strong> by this <a href=\"https://www.patreon.com/johnvansickle\">cool dude</a>, Where he has listed a set of static builds of FFmpeg for different environments. You can download <a href=\"https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz\">FFmpeg-release-amd64-static.tar.xz</a> file which is the one matches the Lambda machine and extract it inside your Lambda function package.</p>\n<p>The package folder will look like something like this after extracting FFmpeg</p>\n<p><img alt=\"How folder structure looks like after extracting FFmpeg\" src=\"https://rusith.me/post-data/2019-02-21-ffmpeg-in-lambda/file-structure.png\" ></p>\n<h2 id=\"runningit\">Running It</h2>\n<p>You will need to have chmod and ncp installed to run this code. Run <code>npm install chmod ncp — save</code> to install the packages.</p>\n<p>Let’s jump right into a code which executes FFmpeg.</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">const</span> exec = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;child_process&quot;</span>).<span class=\"hljs-property\">execFile</span>\n<span class=\"hljs-keyword\">const</span> { ncp } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;ncp&quot;</span>)\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n<span class=\"hljs-keyword\">const</span> chmod = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;chmod&quot;</span>)\n\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">mux</span> = <span class=\"hljs-keyword\">async</span> (audioFile, videoFile, muxedFile) =&gt;\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">/*\n    We can&#x27;t run the ffmpeg from the current folder because it is read only.\n    in Lambda all locations except /tmp are read only.\n    So I had to copy the ffmpeg to the temp folder and give it execute permissions to make it work\n   */</span>\n    <span class=\"hljs-comment\">// ncp will copy the whole directory to /tmp/ffmpeg</span>\n    <span class=\"hljs-title function_\">ncp</span>(\n      path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&quot;../ffmpeg/&quot;</span>),\n      <span class=\"hljs-string\">&quot;/tmp/ffmpeg&quot;</span>,\n      {\n        <span class=\"hljs-attr\">clobber</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Do not overwrite if already exists (Lambda sometimes re-uses the container)</span>\n      },\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (err) {\n          <span class=\"hljs-title function_\">reject</span>(err)\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-comment\">// Give execute permissions to the ffmpeg</span>\n          <span class=\"hljs-title function_\">chmod</span>(<span class=\"hljs-string\">&quot;/tmp/ffmpeg/ffmpeg&quot;</span>, {\n            <span class=\"hljs-attr\">execute</span>: <span class=\"hljs-literal\">true</span>,\n          })\n\n          <span class=\"hljs-comment\">// Muxing an audio file and a video file into one video file</span>\n          <span class=\"hljs-comment\">// This could be any operation on FFmpeg, you just have to give the parameters correctly.</span>\n          <span class=\"hljs-title function_\">exec</span>(\n            <span class=\"hljs-string\">&quot;/tmp/ffmpeg/ffmpeg&quot;</span>,\n            [\n              <span class=\"hljs-string\">&quot;-y&quot;</span>,\n              <span class=\"hljs-string\">&quot;-i&quot;</span>,\n              videoFile,\n              <span class=\"hljs-string\">&quot;-i&quot;</span>,\n              audioFile,\n              <span class=\"hljs-string\">&quot;-map&quot;</span>,\n              <span class=\"hljs-string\">&quot; 0:0&quot;</span>,\n              <span class=\"hljs-string\">&quot;-map&quot;</span>,\n              <span class=\"hljs-string\">&quot;1:0&quot;</span>,\n              <span class=\"hljs-string\">&quot;-c&quot;</span>,\n              <span class=\"hljs-string\">&quot;copy&quot;</span>,\n              muxedFile,\n            ],\n            {},\n            <span class=\"hljs-function\">(<span class=\"hljs-params\">error, stdout</span>) =&gt;</span> {\n              <span class=\"hljs-keyword\">if</span> (error) {\n                <span class=\"hljs-title function_\">reject</span>(error)\n              } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-title function_\">resolve</span>(stdout)\n              }\n            }\n          )\n        }\n      }\n    )\n  })\n</code></pre>\n<p>In here I am trying to merge two files into one. This could be any other operation. The first thing we do here is copying the FFmpeg folder to the tmp folder, then we give the execute permission to the FFmpeg file using the chmod node package.</p>\n<p>You get the idea. You can even speed up the process by just copying the archive itself into the package and extracting it to the temp folder in Lambda.</p>"},"page":"Post","topTags":["programming","aws","web","machineLearning","react","javascript","dataScience","typescript","r","csharp"],"relatedPosts":[{"title":"Deploying an app on AWS ECS with CDK","tags":["programming","nextJS","react","aws","ecs","typescript","cdk","devops"],"fullUrl":"https://rusith.me/blog/deploy-app-on-aws-ecs-with-cdk-auto-scaling-and-load-balancing","date":"Wed, Feb 15, 2023","description":"How to deploy an application on AWS ECS with load-balancing and auto-scaling using CDK by writing the CDK code in TypeScript","banner":"/post-data/2023-02-15-deploying-react-app-on-ecs/banner.png"},{"title":"Running a Nuget Feed on S3 with Automated Deployments","tags":["programming","dotnet","s3","aws","nuget"],"fullUrl":"https://rusith.me/blog/nuget-feed-on-s3","date":"Sat, Nov 2, 2019","description":"There are many ways of creating a Nuget feed. but did you know that you can run a Nuget feed on S3 without any computing infrastructure? In this post, I will show you how you can create a Nuget feed on S3 using Sleet and automate the deployment process for packages.","banner":"/post-data/2019-11-03-nuget-feed-s3/banner.png"},{"title":"Deploying a Website on S3 With SSL, Continuous Integration","tags":["aws","programming","web"],"fullUrl":"https://rusith.me/blog/building-a-website-on-s3","date":"Mon, Aug 5, 2019","description":"In this post, I am creating a website and host it on S3 and setup a continuous integration pipeline setup using Gitlab","banner":"/post-data/2019-08-14-building-a-website-on-s3/banner.png"}]},"__N_SSG":true}