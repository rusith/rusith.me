{"pageProps":{"post":{"fileName":"2019-11-03-nuget-feed-on-s3.md","fullPath":"/home/runner/work/rusith.me/rusith.me/modules/blog/posts/2019-11-03-nuget-feed-on-s3.md","title":"Running a Nuget Feed on S3 with Automated Deployments","tags":["programming","dotnet","s3","aws","nuget"],"comments":true,"description":"There are many ways of creating a Nuget feed. but did you know that you can run a Nuget feed on S3 without any computing infrastructure? In this post, I will show you how you can create a Nuget feed on S3 using Sleet and automate the deployment process for packages.","banner":"/post-data/2019-11-03-nuget-feed-s3/banner.png","dateCreated":"Sat Nov 02 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","dateModified":"Sat Nov 02 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","datePublished":"Sun Nov 03 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","dependencies":"AWS","about":"Creating a Nuget feed on an AWS S3 bucket using Sleet","path":"/blog/nuget-feed-on-s3","oldPath":"/2019/11/03/nuget-feed-on-s3","dateCreatedFormatted":"Sat, Nov 2, 2019","fullUrl":"https://rusith.me/blog/nuget-feed-on-s3","fileContent":"---\ntitle: Running a Nuget Feed on S3 with Automated Deployments\ntags: programming dotnet s3 aws nuget\ncomments: true\ndescription: There are many ways of creating a Nuget feed. but did you know that you can run a Nuget feed on S3 without any computing infrastructure? In this post, I will show you how you can create a Nuget feed on S3 using Sleet and automate the deployment process for packages.\nbanner: /post-data/2019-11-03-nuget-feed-s3/banner.png\ndateCreated: 2019-11-02\ndateModified: 2019-11-02\ndatePublished: 2019-11-03\ndependencies: AWS\nabout: Creating a Nuget feed on an AWS S3 bucket using Sleet\npath: /nuget-feed-on-s3\noldPath: /2019/11/03/nuget-feed-on-s3\n---\n\n<img alt=\"Page banner\" class=\"$$styles.banner\" src=\"$$page_banner_full_path\">\n\nWhenever you wanted to create a separate Nuget feed for your Nuget packages, there are Nuber of ways to do that. Most of them include some computing. which means you have to provision a server and run a Nuget application on a computer. But its also possible to create a static Nuget feed on a cloud file system like S3. One way to do this is by using the <a target=\"_blank\" href=\"https://github.com/emgarten/Sleet\">Sleet</a> tool. which is an open-source and free application.\n\n### What is Sleet\n\nSleet is a CLI tool that allows you to create Nuget feeds on `S3` or `Azure Storage` easily. Sleet creates a file system that doesn't require any computing (Serverless). Sleet also supports Symbols so you can create a symbol server easily.\n\n### Automating\n\nYou can do everything Sleet can do with just your terminal and an S3 bucket. but this post is about automating that process with `Git`, `GitLab`(or any other CI provider). I am going to create a solution with few Class libraries and create a deployment pipeline to automatically deploy them as Nuget packages to our Nuget source which will be in `S3`.\n\nCheck the <a target=\"_blank\" href=\"https://github.com/emgarten/Sleet/blob/master/doc/index.md\">Sleet Documentation</a> for detailed information about Sleet.\n\n### Setting up the S3 Bucket\n\nThe first thing we have to do is to create the S3 bucket that we will be using to create the Nuget feed. I am going to name mine as `rusith.nugetpackages`. To access the bucket, you will have to make it public. You can limit it to an IP range if you want to increase security. So change the bucket policy to something like below. It will allow access to the bucket from anywhere.\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AddPerm\",\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::<your bucket name>/*\"\n    }\n  ]\n}\n```\n\n### IAM Settings\n\nNow our bucket is all setup. Now we need a way to modify the content of the bucket from the CI server. for this, we can create an IAM policy that will give access to the S3 bucket and then, create a user with that policy attached. Then we can use the credentials of that user from the CI server to upload files.\n\nThe IAM policy should be something like below. It will give write access to the source bucket that we have created.\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"VisualEditor0\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\", \"s3:GetObjectAcl\", \"s3:GetObject\", \"s3:ListBucket\", \"s3:DeleteObject\"],\n      \"Resource\": [\"arn:aws:s3:::<bucket name>/*\", \"arn:aws:s3:::<bucket name>\"]\n    },\n    {\n      \"Sid\": \"VisualEditor1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetAccountPublicAccessBlock\",\n        \"s3:ListAllMyBuckets\",\n        \"s3:ListJobs\",\n        \"s3:CreateJob\",\n        \"s3:HeadBucket\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\nIAM policy is now ready to be used. Now we just have to create a new user and attach the policy to that user. Make sure you have given programmatic access to the user when creating. as we are going to use these credentials only through the API. it is necessary to have programmatic access.\n\n<img alt=\"Create a new IAM user\" src=\"$$base_url/post-data/2019-11-03-nuget-feed-s3/iam-create-user.png\">\n\nAnd don't forget to attach the policy you just created.\n\n<img alt=\"Create user policy for IAM user\" src=\"$$base_url/post-data/2019-11-03-nuget-feed-s3/iam-create-user-policy.png\">\n\nOnce the user is created. don't forget to take a copy of the access keys of the user. Now the IAM part is done. we can go ahead and implement our packages.\n\n### Creating the Packages\n\nFor this demonstration, I will create a simple solution with only two class libraries that can be used as Nuget packages. Below commands will create the solution structure.\n\n```sh\ndotnet new sln --name NugetPackages\ndotnet new classlib --name Rusith.FileHelpers\ndotnet new classlib --name Rusith.EmailHelpers\ndotnet sln ./NugetPackages.sln add ./Rusith.EmailHelpers/Rusith.EmailHelpers.csproj\ndotnet sln ./NugetPackages.sln add ./Rusith.FileHelpers/Rusith.FileHelpers.csproj\n```\n\nNow you can write your code for each library that should be there in the 1.0 version if you like. And make sure you have filled the information required to create a Nuget package in each project.\n\n<img alt=\"Nuget feed project settings\" src=\"$$base_url/post-data/2019-11-03-nuget-feed-s3/project-settings.png\">\n\nNow you will have to initialize the Git repository, create the origin repository and push the code if you haven't already.\n\n### CI\n\nOkay, now we have the projects with us, now we can go ahead and start creating the CI pipeline to automate the build process with `Gitlab`. My approach will be to create a single script that will go through all projects in the solution, push them to S3 using Sleet. The script for doing that would look like below.\n\n```sh\nexport PATH=\"$PATH:/root/.dotnet/tools\"\ndotnet tool install -g sleet # Installing Sleet\n\ncd ./source\ndotnet build -c Release # Build the solution with release configuration\n\nfor path in \"$PWD\"/* # For everything inside the folder\ndo\n  if [[ (-d $path) && ($path != *.Tests) ]]; then # If the path is a directory\n    dotnet pack $path -c Release --force --include-symbols -o $path/package # Package the project\n    nupkgs=`ls $path/package/*.nupkg`\n    for f in $nupkgs # Go though the package files\n    do\n      sleet push $f --config ./sleet.json --source NugetSource # Push to the source\n    done\n  fi\ndone\n```\n\nWhat does this do?\n\n- It will find the project folders and create Nuget packages using the `dotnet pack` command.\n- Then it will find the `.nupkg` files and run `sleet push` using the `./sleet.json` file as the configuration. on each of them to the `NugetSource`.\n\nFor this to work, we need the `sleet.json` file in the repository. This is the file where we specify the configuration for Sleet. Here we specify the sources that we are going to use. the source, for now, is the `NugetSource` which is the S3 bucket we have created. because we are not providing any credentials for S3 in this configuration, we will have to provide them as standard AWS environment variables later.\n\n```json\n{\n  \"username\": \"<username>\",\n  \"useremail\": \"<email>\",\n  \"sources\": [\n    {\n      \"name\": \"NugetSource\",\n      \"type\": \"s3\",\n      \"bucketName\": \"<your bucket name>\",\n      \"region\": \"<your bucket region>\"\n    }\n  ]\n}\n```\n\nNow we just have to tell the CI server that we want to run the `push.sh` script every time we push to a release branch. I use this configuration below to do that in Gitlab CI.\n\n```yml\nimage: microsoft/dotnet:latest\nstages:\n  - build\n  - release\n\nbuild:\n  stage: build\n  script:\n    - dotnet build\n\nrelease:\n  stage: release\n  only:\n    - release\n  before_script:\n    - chmod +x ./push.sh\n  script:\n    - bash ./push.sh\n  environment:\n    name: Production\n```\n\nWhat this does is it will run a build for every commit but only run the push script when we push our code to the `release` branch.\n\nNow we have to add the credentials for the user that we created in the IAM console as environment variables in the CI server. the main two variables that are required are `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.\n\n<img alt=\"Secret variables\" src=\"$$base_url/post-data/2019-11-03-nuget-feed-s3/variables.png\">\n\nNow, everything is ready to go. Push your code to the `release` branch and it will build the project and Sleet will do its magic to create the Nuget source on S3.\n\nIf you have done everything correctly, You will see an output like below in the CI console.\n\n<img alt=\"Pipeline result\" src=\"$$base_url/post-data/2019-11-03-nuget-feed-s3/pipeline-result.png\">\n\nAnd the S3 Bucket content will be updated to look something like below.\n\n<img alt=\"S3 result\" src=\"$$base_url/post-data/2019-11-03-nuget-feed-s3/s3-result.png\">\n\nNow you can use the Nuget packages you just created. for this, you must first add the URL to the `index.json` file of the S3 bucket as a Nuget source in your IDE. something like below (Rider).\n\n<img alt=\"Using the Nuget feed\" src=\"$$base_url/post-data/2019-11-03-nuget-feed-s3/feed.png\">\n\nAnd now, you can use the Packages just like you would use a normal Nuget package.\n\n<img alt=\"Install packages using the new feed\" src=\"$$base_url/post-data/2019-11-03-nuget-feed-s3/nuget-install.png\">\n","parsedContent":"<p><img alt=\"Page banner\" class=\"Post_banner__soX4H\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/banner.png\"></p>\n<p>Whenever you wanted to create a separate Nuget feed for your Nuget packages, there are Nuber of ways to do that. Most of them include some computing. which means you have to provision a server and run a Nuget application on a computer. But its also possible to create a static Nuget feed on a cloud file system like S3. One way to do this is by using the <a target=\"_blank\" href=\"https://github.com/emgarten/Sleet\">Sleet</a> tool. which is an open-source and free application.</p>\n<h3 id=\"whatissleet\">What is Sleet</h3>\n<p>Sleet is a CLI tool that allows you to create Nuget feeds on <code>S3</code> or <code>Azure Storage</code> easily. Sleet creates a file system that doesn't require any computing (Serverless). Sleet also supports Symbols so you can create a symbol server easily.</p>\n<h3 id=\"automating\">Automating</h3>\n<p>You can do everything Sleet can do with just your terminal and an S3 bucket. but this post is about automating that process with <code>Git</code>, <code>GitLab</code>(or any other CI provider). I am going to create a solution with few Class libraries and create a deployment pipeline to automatically deploy them as Nuget packages to our Nuget source which will be in <code>S3</code>.</p>\n<p>Check the <a target=\"_blank\" href=\"https://github.com/emgarten/Sleet/blob/master/doc/index.md\">Sleet Documentation</a> for detailed information about Sleet.</p>\n<h3 id=\"settingupthes3bucket\">Setting up the S3 Bucket</h3>\n<p>The first thing we have to do is to create the S3 bucket that we will be using to create the Nuget feed. I am going to name mine as <code>rusith.nugetpackages</code>. To access the bucket, you will have to make it public. You can limit it to an IP range if you want to increase security. So change the bucket policy to something like below. It will allow access to the bucket from anywhere.</p>\n<pre><code class=\"hljs json language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;Version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2012-10-17&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;Statement&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;Sid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;AddPerm&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Effect&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Allow&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Principal&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;*&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Action&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;s3:GetObject&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Resource&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;arn:aws:s3:::&lt;your bucket name&gt;/*&quot;</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3 id=\"iamsettings\">IAM Settings</h3>\n<p>Now our bucket is all setup. Now we need a way to modify the content of the bucket from the CI server. for this, we can create an IAM policy that will give access to the S3 bucket and then, create a user with that policy attached. Then we can use the credentials of that user from the CI server to upload files.</p>\n<p>The IAM policy should be something like below. It will give write access to the source bucket that we have created.</p>\n<pre><code class=\"hljs json language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;Version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2012-10-17&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;Statement&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;Sid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;VisualEditor0&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Effect&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Allow&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Action&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;s3:PutObject&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;s3:GetObjectAcl&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;s3:GetObject&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;s3:ListBucket&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;s3:DeleteObject&quot;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Resource&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;arn:aws:s3:::&lt;bucket name&gt;/*&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;arn:aws:s3:::&lt;bucket name&gt;&quot;</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;Sid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;VisualEditor1&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Effect&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Allow&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Action&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">&quot;s3:GetAccountPublicAccessBlock&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;s3:ListAllMyBuckets&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;s3:ListJobs&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;s3:CreateJob&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;s3:HeadBucket&quot;</span>\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;Resource&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;*&quot;</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>IAM policy is now ready to be used. Now we just have to create a new user and attach the policy to that user. Make sure you have given programmatic access to the user when creating. as we are going to use these credentials only through the API. it is necessary to have programmatic access.</p>\n<p><img alt=\"Create a new IAM user\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/iam-create-user.png\"></p>\n<p>And don't forget to attach the policy you just created.</p>\n<p><img alt=\"Create user policy for IAM user\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/iam-create-user-policy.png\"></p>\n<p>Once the user is created. don't forget to take a copy of the access keys of the user. Now the IAM part is done. we can go ahead and implement our packages.</p>\n<h3 id=\"creatingthepackages\">Creating the Packages</h3>\n<p>For this demonstration, I will create a simple solution with only two class libraries that can be used as Nuget packages. Below commands will create the solution structure.</p>\n<pre><code class=\"hljs sh language-sh\">dotnet new sln --name NugetPackages\ndotnet new classlib --name Rusith.FileHelpers\ndotnet new classlib --name Rusith.EmailHelpers\ndotnet sln ./NugetPackages.sln add ./Rusith.EmailHelpers/Rusith.EmailHelpers.csproj\ndotnet sln ./NugetPackages.sln add ./Rusith.FileHelpers/Rusith.FileHelpers.csproj\n</code></pre>\n<p>Now you can write your code for each library that should be there in the 1.0 version if you like. And make sure you have filled the information required to create a Nuget package in each project.</p>\n<p><img alt=\"Nuget feed project settings\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/project-settings.png\"></p>\n<p>Now you will have to initialize the Git repository, create the origin repository and push the code if you haven't already.</p>\n<h3 id=\"ci\">CI</h3>\n<p>Okay, now we have the projects with us, now we can go ahead and start creating the CI pipeline to automate the build process with <code>Gitlab</code>. My approach will be to create a single script that will go through all projects in the solution, push them to S3 using Sleet. The script for doing that would look like below.</p>\n<pre><code class=\"hljs sh language-sh\"><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$PATH</span>:/root/.dotnet/tools&quot;</span>\ndotnet tool install -g sleet <span class=\"hljs-comment\"># Installing Sleet</span>\n\n<span class=\"hljs-built_in\">cd</span> ./source\ndotnet build -c Release <span class=\"hljs-comment\"># Build the solution with release configuration</span>\n\n<span class=\"hljs-keyword\">for</span> path <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$PWD</span>&quot;</span>/* <span class=\"hljs-comment\"># For everything inside the folder</span>\n<span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-keyword\">if</span> [[ (-d <span class=\"hljs-variable\">$path</span>) &amp;&amp; (<span class=\"hljs-variable\">$path</span> != *.Tests) ]]; <span class=\"hljs-keyword\">then</span> <span class=\"hljs-comment\"># If the path is a directory</span>\n    dotnet pack <span class=\"hljs-variable\">$path</span> -c Release --force --include-symbols -o <span class=\"hljs-variable\">$path</span>/package <span class=\"hljs-comment\"># Package the project</span>\n    nupkgs=`<span class=\"hljs-built_in\">ls</span> <span class=\"hljs-variable\">$path</span>/package/*.nupkg`\n    <span class=\"hljs-keyword\">for</span> f <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable\">$nupkgs</span> <span class=\"hljs-comment\"># Go though the package files</span>\n    <span class=\"hljs-keyword\">do</span>\n      sleet push <span class=\"hljs-variable\">$f</span> --config ./sleet.json --<span class=\"hljs-built_in\">source</span> NugetSource <span class=\"hljs-comment\"># Push to the source</span>\n    <span class=\"hljs-keyword\">done</span>\n  <span class=\"hljs-keyword\">fi</span>\n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n<p>What does this do?</p>\n<ul>\n<li>It will find the project folders and create Nuget packages using the <code>dotnet pack</code> command.</li>\n<li>Then it will find the <code>.nupkg</code> files and run <code>sleet push</code> using the <code>./sleet.json</code> file as the configuration. on each of them to the <code>NugetSource</code>.</li>\n</ul>\n<p>For this to work, we need the <code>sleet.json</code> file in the repository. This is the file where we specify the configuration for Sleet. Here we specify the sources that we are going to use. the source, for now, is the <code>NugetSource</code> which is the S3 bucket we have created. because we are not providing any credentials for S3 in this configuration, we will have to provide them as standard AWS environment variables later.</p>\n<pre><code class=\"hljs json language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;username&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&lt;username&gt;&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;useremail&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&lt;email&gt;&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;sources&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;NugetSource&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;s3&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;bucketName&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&lt;your bucket name&gt;&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;region&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&lt;your bucket region&gt;&quot;</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Now we just have to tell the CI server that we want to run the <code>push.sh</code> script every time we push to a release branch. I use this configuration below to do that in Gitlab CI.</p>\n<pre><code class=\"hljs yml language-yml\"><span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">microsoft/dotnet:latest</span>\n<span class=\"hljs-attr\">stages:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">build</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">release</span>\n\n<span class=\"hljs-attr\">build:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">build</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dotnet</span> <span class=\"hljs-string\">build</span>\n\n<span class=\"hljs-attr\">release:</span>\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">release</span>\n  <span class=\"hljs-attr\">only:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">release</span>\n  <span class=\"hljs-attr\">before_script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">chmod</span> <span class=\"hljs-string\">+x</span> <span class=\"hljs-string\">./push.sh</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bash</span> <span class=\"hljs-string\">./push.sh</span>\n  <span class=\"hljs-attr\">environment:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Production</span>\n</code></pre>\n<p>What this does is it will run a build for every commit but only run the push script when we push our code to the <code>release</code> branch.</p>\n<p>Now we have to add the credentials for the user that we created in the IAM console as environment variables in the CI server. the main two variables that are required are <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code>.</p>\n<p><img alt=\"Secret variables\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/variables.png\"></p>\n<p>Now, everything is ready to go. Push your code to the <code>release</code> branch and it will build the project and Sleet will do its magic to create the Nuget source on S3.</p>\n<p>If you have done everything correctly, You will see an output like below in the CI console.</p>\n<p><img alt=\"Pipeline result\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/pipeline-result.png\"></p>\n<p>And the S3 Bucket content will be updated to look something like below.</p>\n<p><img alt=\"S3 result\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/s3-result.png\"></p>\n<p>Now you can use the Nuget packages you just created. for this, you must first add the URL to the <code>index.json</code> file of the S3 bucket as a Nuget source in your IDE. something like below (Rider).</p>\n<p><img alt=\"Using the Nuget feed\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/feed.png\"></p>\n<p>And now, you can use the Packages just like you would use a normal Nuget package.</p>\n<p><img alt=\"Install packages using the new feed\" src=\"https://rusith.me/post-data/2019-11-03-nuget-feed-s3/nuget-install.png\"></p>"},"page":"Post","topTags":["programming","aws","web","machineLearning","react","javascript","dataScience","typescript","r","csharp"],"relatedPosts":[{"title":"Deploying an app on AWS ECS with CDK","tags":["programming","nextJS","react","aws","ecs","typescript","cdk","devops"],"fullUrl":"https://rusith.me/blog/deploy-app-on-aws-ecs-with-cdk-auto-scaling-and-load-balancing","date":"Wed, Feb 15, 2023","description":"How to deploy an application on AWS ECS with load-balancing and auto-scaling using CDK by writing the CDK code in TypeScript","banner":"/post-data/2023-02-15-deploying-react-app-on-ecs/banner.png"},{"title":"Deploying a Website on S3 With SSL, Continuous Integration","tags":["aws","programming","web"],"fullUrl":"https://rusith.me/blog/building-a-website-on-s3","date":"Mon, Aug 5, 2019","description":"In this post, I am creating a website and host it on S3 and setup a continuous integration pipeline setup using Gitlab","banner":"/post-data/2019-08-14-building-a-website-on-s3/banner.png"},{"title":"Creating a Re-Usable Presto Worker Image in EC2","tags":["programming","bigdata","aws","cloud"],"fullUrl":"https://rusith.me/blog/re-usable-presto-worker-image-ec2","date":"Thu, Jul 25, 2019","description":"Creating a machine image that can be used to spin up presto worker instances without configuring each one. this could be helpful when you don't want to use any  orchestration tool","banner":"/post-data/2019-07-25-re-usable-presto-worker/5-workers-dashboard.png"}]},"__N_SSG":true}