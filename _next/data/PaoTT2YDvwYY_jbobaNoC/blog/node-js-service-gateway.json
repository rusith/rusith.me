{"pageProps":{"post":{"fileName":"2018-03-15-node-service-gateway.md","fullPath":"/home/runner/work/rusith.me/rusith.me/modules/blog/posts/2018-03-15-node-service-gateway.md","layout":"post","title":"A Service Gateway Using NodeJS","tags":["programming","javascript","micro-service","web"],"comments":true,"description":"In this post I am writing a simple and minimal service gateway using JavaScript and NodeJS which can handle authentication , authorization.","dateCreated":"Thu Mar 15 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","dateModified":"Thu Mar 15 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","datePublished":"Thu Mar 15 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","dependencies":"NodeJS","about":"Creating a service gateway (API gateway) using JavaScript and NodeJS","path":"/blog/node-js-service-gateway","oldPath":"/2018/03/15/node-service-gateway","dateCreatedFormatted":"Thu, Mar 15, 2018","fullUrl":"https://rusith.me/blog/node-js-service-gateway","fileContent":"---\nlayout: post\ntitle: A Service Gateway Using NodeJS\ntags: programming javascript micro-service web\ncomments: true\ndescription: In this post I am writing a simple and minimal service gateway using JavaScript and NodeJS which can handle authentication , authorization.\ndateCreated: 2018-03-15\ndateModified: 2018-03-15\ndatePublished: 2018-03-15\ndependencies: NodeJS\nabout: Creating a service gateway (API gateway) using JavaScript and NodeJS\npath: /node-js-service-gateway\noldPath: /2018/03/15/node-service-gateway\n---\n\nThis is an API gateway implemented using [Node JS Proxy](https://www.npmjs.com/package/httpp-proxy) and [Redis](https://www.npmjs.com/package/redis).\n\nThe use case was I Had to implement a service gateway for a microservice backend. I tried various open source API gateways but didn’t help with my requirements. some of my requirements was\n\n* Some endpoints or APIs are secured while others aren’t\n* One token can be used to access all secured endpoints\n* Users should be authenticated using username and password\n\nThen i decided to do it my self without using an existing implementation. as a temporary solution. Here I Use Node JS to write the proxy . Node JS does a great job handling requests.\n\n```js\n(function() {\n    \"use strict\";\n\n    var http = require('http'),\n        httpProxy = require('http-proxy');\n    var redis = require('redis'); // We use redis to store tokens.\n    var redisClient = redis.createClient(6379, 'localhost'); // Create the redis client.\n    var helpers = require(\"./base/helpers.js\"); // This module contains some helper functions.\n    var TokenEndPoint = '/token'; // Endpoint of the token requests.\n    var settings = { // Settings used in the proxy  (can be from a file or database).\n      \"userAuthenticationPath\": \"/users/authenticate\", // The endpoint in the authentication API  which actually authenticates the user.\n      \"authenticationServiceUrl\": \"http://authservice\", // Hostname of the authentication service (API). \n      \"tokenLifeTime\": 3600, // Lifetime of an access token.\n      \"origins\": [\"http://abc.com\"], // Allowed origins.\n      \"listen\": 5500, // Port to listen.\n      \"services\": [{  // List of services (APIs).\n              \"name\": \"Order Service\", // Name of the service.\n              \"path\": \"/orders\", // Paths belong to this service. \n              \"authenticate\": true, // Only authorized users can access this API.\n              \"allowedMethods\": \"GET,POST,PUT,DELETE\", // Allowed HTTP verbs.\n              \"upStream\": \"http://orderservice\" // Destination address of the API.\n          },\n          {\n              \"name\": \"Item Service\",\n              \"path\": \"/items\",\n              \"authenticate\": false, // Anyone can access this API.\n              \"allowedMethods\": \"GET\", // Only GET is allowed.\n              \"upStream\": \"http://itemservice\"\n          }\n      ]\n    };\n\n    // This function gives the service for given base path.\n    function getServiceForPath(path) {\n        var services = settings.services;\n        for (var i = 0, sl = services.length; i < sl; i++) {\n            if (path.startsWith(services[i].path)) {\n                return services[i];\n            }\n        }\n    }\n\n    // Creates the proxy server.\n    var proxy = httpProxy.createProxyServer({});\n\n    // Registers a function to call when a response is arrived.\n    proxy.on('proxyRes', function(proxyReq, req, res, options) {\n        // If the request is a token request (we set this property in the request code), we execute below code.\n        // Otherwise the response will be delivered to the requester as is.\n        if (req.tokenRequest && proxyReq.statusCode === 200) {\n            var userId = proxyReq.headers.userid;\n            // Authentication API should set the userid header if the credentials are correct.\n            // If the header userid is not exists, we send a not authorized response the the requester. \n            if (!userId) {\n                return sendNotAuthorized(res);\n            }\n            // Creates a GUID as an access token.\n            var accessToken = helpers.guid();\n            // Save the access token in Redis.\n            redisClient.setex(accessToken, settings.tokenLifeTime, '1');\n            // Set headers required by the requester.\n            res.setHeader('token', accessToken);\n            res.setHeader('expires_in', settings.tokenLifeTime);\n            res.setHeader('Access-Control-Expose-Headers', 'token,expires_in,userid');\n        }\n    });\n\n    // proxy the request to the target service.\n    function sendToService(service, req, res) {\n        var url = req.url;\n        req.url = url.substr(service.path.length, url.length - service.path.length);\n        proxy.web(req, res, { target: service.upStream }, function(e) { console.error(e); });\n    }\n\n    function sendJson(obj, res) {\n        res.setHeader(\"Content-Type\", \"application/json\");\n        res.end(JSON.stringify(obj));\n    }\n\n    function sendNotAuthorized(res) {\n        res.statusCode = 401;\n        sendJson('You are not allowed to access this API!', res);\n    }\n\n    function sendNotFound(res) {\n        res.statusCode = 404;\n        sendJson('Could not find any resources for given path.', res);\n    }\n\n    function sendMethodNotAllowed(res) {\n        res.statusCode = 405;\n        sendJson('Method not allowed', res);\n    }\n\n    // Check CORS of the request\n    function CheckCors(service, req, res) {\n        // Set needed headers.\n        if (req.headers.origin) {\n            res.setHeader('Access-Control-Allow-Origin', req.headers.origin);\n        }\n        res.setHeader('Access-Control-Allow-Methods', service.allowedMethods);\n        res.setHeader('Access-Control-Allow-Headers', 'Authorization,Content-Type,Accept');\n        // Just send the response if the request is an POTIONS request.\n        if (req.method == 'OPTIONS') {\n            res.end();\n            return true;\n        }\n        return false;\n    }\n\n    var server = http.createServer(function(req, res) {\n        var origins = settings.origins;\n        var requestHeaders = req.headers;\n        var requestUrl = req.url.toLowerCase();\n        // If the allowed origins are declared in the settings.\n        if (origins) {\n            // Check the origin of the request and send a not authorized response if the request origin is not allowed.\n            if (!requestHeaders.origin || 0 > origins.indexOf(requestHeaders.origin)) {\n                return sendNotAuthorized(res);\n            }\n        }\n        // If the request is for getting the token.\n        if (requestUrl.startsWith(TokenEndPoint)) {\n            // Set request property to check later in the response code.\n            req.tokenRequest = true;\n            // Change destination to the authentication endpoint in the authentication API.\n            req.url = settings.userAuthenticationPath;\n            if (!CheckCors({ allowedMethods: 'POST' }, req, res)) {\n                // Proxy the request.\n                proxy.web(req, res, { target: settings.authenticationServiceUrl }, function(e) { console.error(e); });\n            }\n        } else {\n            // Get the service.\n            var service = getServiceForPath(requestUrl);\n            if (!service) {\n                // If no service found for the request path, returns a not found.\n                return sendNotFound(res);\n            }\n            // If the method is not OPTIONS and method is not in the allowed methods list ,\n            // returns a not allowed response.\n            if (req.method != 'OPTIONS' && -1 > service.allowedMethods.indexOf(req.method)) {\n                return sendMethodNotAllowed(res);\n            }\n            // If the service needs authentication.\n            if (service.authenticate) {\n                // Request must have the the authorization header.\n                if (requestHeaders.authorization) {\n                   // If Redis has a value for request's authentication header value.\n                    redisClient.exists(requestHeaders.authorization, function(err, reply) {\n                        if (reply === 1) {\n                            if (!CheckCors(service, req, res)) {\n                                // Proxy the request to the target service.\n                                return sendToService(service, req, res);\n                            }\n                        } else {\n                            // If not authenticated or token has expired , send a not authorized response.\n                            return sendNotAuthorized(res);\n                        }\n                    });\n                } else {\n                    // If authorization header does not exist , then send a not authorized response.\n                    return sendNotAuthorized(res);\n                }\n            } else {\n                // If the service does not need authentication , proxy the request to the target service.\n                if (!CheckCors(service, req, res)) {\n                    return sendToService(service, req, res);\n                }\n            }\n        }\n    });\n    // Listen to the port.\n    server.listen(settings.listen);\n})();\n```\n","parsedContent":"<p>This is an API gateway implemented using <a href=\"https://www.npmjs.com/package/httpp-proxy\">Node JS Proxy</a> and <a href=\"https://www.npmjs.com/package/redis\">Redis</a>.</p>\n<p>The use case was I Had to implement a service gateway for a microservice backend. I tried various open source API gateways but didn’t help with my requirements. some of my requirements was</p>\n<ul>\n<li>Some endpoints or APIs are secured while others aren’t</li>\n<li>One token can be used to access all secured endpoints</li>\n<li>Users should be authenticated using username and password</li>\n</ul>\n<p>Then i decided to do it my self without using an existing implementation. as a temporary solution. Here I Use Node JS to write the proxy . Node JS does a great job handling requests.</p>\n<pre><code class=\"hljs js language-js\">(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-string\">&quot;use strict&quot;</span>;\n\n    <span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http&#x27;</span>),\n        httpProxy = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;http-proxy&#x27;</span>);\n    <span class=\"hljs-keyword\">var</span> redis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;redis&#x27;</span>); <span class=\"hljs-comment\">// We use redis to store tokens.</span>\n    <span class=\"hljs-keyword\">var</span> redisClient = redis.<span class=\"hljs-title function_\">createClient</span>(<span class=\"hljs-number\">6379</span>, <span class=\"hljs-string\">&#x27;localhost&#x27;</span>); <span class=\"hljs-comment\">// Create the redis client.</span>\n    <span class=\"hljs-keyword\">var</span> helpers = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./base/helpers.js&quot;</span>); <span class=\"hljs-comment\">// This module contains some helper functions.</span>\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">TokenEndPoint</span> = <span class=\"hljs-string\">&#x27;/token&#x27;</span>; <span class=\"hljs-comment\">// Endpoint of the token requests.</span>\n    <span class=\"hljs-keyword\">var</span> settings = { <span class=\"hljs-comment\">// Settings used in the proxy  (can be from a file or database).</span>\n      <span class=\"hljs-string\">&quot;userAuthenticationPath&quot;</span>: <span class=\"hljs-string\">&quot;/users/authenticate&quot;</span>, <span class=\"hljs-comment\">// The endpoint in the authentication API  which actually authenticates the user.</span>\n      <span class=\"hljs-string\">&quot;authenticationServiceUrl&quot;</span>: <span class=\"hljs-string\">&quot;http://authservice&quot;</span>, <span class=\"hljs-comment\">// Hostname of the authentication service (API). </span>\n      <span class=\"hljs-string\">&quot;tokenLifeTime&quot;</span>: <span class=\"hljs-number\">3600</span>, <span class=\"hljs-comment\">// Lifetime of an access token.</span>\n      <span class=\"hljs-string\">&quot;origins&quot;</span>: [<span class=\"hljs-string\">&quot;http://abc.com&quot;</span>], <span class=\"hljs-comment\">// Allowed origins.</span>\n      <span class=\"hljs-string\">&quot;listen&quot;</span>: <span class=\"hljs-number\">5500</span>, <span class=\"hljs-comment\">// Port to listen.</span>\n      <span class=\"hljs-string\">&quot;services&quot;</span>: [{  <span class=\"hljs-comment\">// List of services (APIs).</span>\n              <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Order Service&quot;</span>, <span class=\"hljs-comment\">// Name of the service.</span>\n              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;/orders&quot;</span>, <span class=\"hljs-comment\">// Paths belong to this service. </span>\n              <span class=\"hljs-string\">&quot;authenticate&quot;</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// Only authorized users can access this API.</span>\n              <span class=\"hljs-string\">&quot;allowedMethods&quot;</span>: <span class=\"hljs-string\">&quot;GET,POST,PUT,DELETE&quot;</span>, <span class=\"hljs-comment\">// Allowed HTTP verbs.</span>\n              <span class=\"hljs-string\">&quot;upStream&quot;</span>: <span class=\"hljs-string\">&quot;http://orderservice&quot;</span> <span class=\"hljs-comment\">// Destination address of the API.</span>\n          },\n          {\n              <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Item Service&quot;</span>,\n              <span class=\"hljs-string\">&quot;path&quot;</span>: <span class=\"hljs-string\">&quot;/items&quot;</span>,\n              <span class=\"hljs-string\">&quot;authenticate&quot;</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// Anyone can access this API.</span>\n              <span class=\"hljs-string\">&quot;allowedMethods&quot;</span>: <span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-comment\">// Only GET is allowed.</span>\n              <span class=\"hljs-string\">&quot;upStream&quot;</span>: <span class=\"hljs-string\">&quot;http://itemservice&quot;</span>\n          }\n      ]\n    };\n\n    <span class=\"hljs-comment\">// This function gives the service for given base path.</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getServiceForPath</span>(<span class=\"hljs-params\">path</span>) {\n        <span class=\"hljs-keyword\">var</span> services = settings.<span class=\"hljs-property\">services</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, sl = services.<span class=\"hljs-property\">length</span>; i &lt; sl; i++) {\n            <span class=\"hljs-keyword\">if</span> (path.<span class=\"hljs-title function_\">startsWith</span>(services[i].<span class=\"hljs-property\">path</span>)) {\n                <span class=\"hljs-keyword\">return</span> services[i];\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">// Creates the proxy server.</span>\n    <span class=\"hljs-keyword\">var</span> proxy = httpProxy.<span class=\"hljs-title function_\">createProxyServer</span>({});\n\n    <span class=\"hljs-comment\">// Registers a function to call when a response is arrived.</span>\n    proxy.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;proxyRes&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">proxyReq, req, res, options</span>) {\n        <span class=\"hljs-comment\">// If the request is a token request (we set this property in the request code), we execute below code.</span>\n        <span class=\"hljs-comment\">// Otherwise the response will be delivered to the requester as is.</span>\n        <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">tokenRequest</span> &amp;&amp; proxyReq.<span class=\"hljs-property\">statusCode</span> === <span class=\"hljs-number\">200</span>) {\n            <span class=\"hljs-keyword\">var</span> userId = proxyReq.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">userid</span>;\n            <span class=\"hljs-comment\">// Authentication API should set the userid header if the credentials are correct.</span>\n            <span class=\"hljs-comment\">// If the header userid is not exists, we send a not authorized response the the requester. </span>\n            <span class=\"hljs-keyword\">if</span> (!userId) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sendNotAuthorized</span>(res);\n            }\n            <span class=\"hljs-comment\">// Creates a GUID as an access token.</span>\n            <span class=\"hljs-keyword\">var</span> accessToken = helpers.<span class=\"hljs-title function_\">guid</span>();\n            <span class=\"hljs-comment\">// Save the access token in Redis.</span>\n            redisClient.<span class=\"hljs-title function_\">setex</span>(accessToken, settings.<span class=\"hljs-property\">tokenLifeTime</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>);\n            <span class=\"hljs-comment\">// Set headers required by the requester.</span>\n            res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>, accessToken);\n            res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&#x27;expires_in&#x27;</span>, settings.<span class=\"hljs-property\">tokenLifeTime</span>);\n            res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class=\"hljs-string\">&#x27;token,expires_in,userid&#x27;</span>);\n        }\n    });\n\n    <span class=\"hljs-comment\">// proxy the request to the target service.</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendToService</span>(<span class=\"hljs-params\">service, req, res</span>) {\n        <span class=\"hljs-keyword\">var</span> url = req.<span class=\"hljs-property\">url</span>;\n        req.<span class=\"hljs-property\">url</span> = url.<span class=\"hljs-title function_\">substr</span>(service.<span class=\"hljs-property\">path</span>.<span class=\"hljs-property\">length</span>, url.<span class=\"hljs-property\">length</span> - service.<span class=\"hljs-property\">path</span>.<span class=\"hljs-property\">length</span>);\n        proxy.<span class=\"hljs-title function_\">web</span>(req, res, { <span class=\"hljs-attr\">target</span>: service.<span class=\"hljs-property\">upStream</span> }, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e); });\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendJson</span>(<span class=\"hljs-params\">obj, res</span>) {\n        res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;application/json&quot;</span>);\n        res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(obj));\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendNotAuthorized</span>(<span class=\"hljs-params\">res</span>) {\n        res.<span class=\"hljs-property\">statusCode</span> = <span class=\"hljs-number\">401</span>;\n        <span class=\"hljs-title function_\">sendJson</span>(<span class=\"hljs-string\">&#x27;You are not allowed to access this API!&#x27;</span>, res);\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendNotFound</span>(<span class=\"hljs-params\">res</span>) {\n        res.<span class=\"hljs-property\">statusCode</span> = <span class=\"hljs-number\">404</span>;\n        <span class=\"hljs-title function_\">sendJson</span>(<span class=\"hljs-string\">&#x27;Could not find any resources for given path.&#x27;</span>, res);\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendMethodNotAllowed</span>(<span class=\"hljs-params\">res</span>) {\n        res.<span class=\"hljs-property\">statusCode</span> = <span class=\"hljs-number\">405</span>;\n        <span class=\"hljs-title function_\">sendJson</span>(<span class=\"hljs-string\">&#x27;Method not allowed&#x27;</span>, res);\n    }\n\n    <span class=\"hljs-comment\">// Check CORS of the request</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CheckCors</span>(<span class=\"hljs-params\">service, req, res</span>) {\n        <span class=\"hljs-comment\">// Set needed headers.</span>\n        <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">origin</span>) {\n            res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, req.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">origin</span>);\n        }\n        res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, service.<span class=\"hljs-property\">allowedMethods</span>);\n        res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"hljs-string\">&#x27;Authorization,Content-Type,Accept&#x27;</span>);\n        <span class=\"hljs-comment\">// Just send the response if the request is an POTIONS request.</span>\n        <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">method</span> == <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span>) {\n            res.<span class=\"hljs-title function_\">end</span>();\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">var</span> server = http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {\n        <span class=\"hljs-keyword\">var</span> origins = settings.<span class=\"hljs-property\">origins</span>;\n        <span class=\"hljs-keyword\">var</span> requestHeaders = req.<span class=\"hljs-property\">headers</span>;\n        <span class=\"hljs-keyword\">var</span> requestUrl = req.<span class=\"hljs-property\">url</span>.<span class=\"hljs-title function_\">toLowerCase</span>();\n        <span class=\"hljs-comment\">// If the allowed origins are declared in the settings.</span>\n        <span class=\"hljs-keyword\">if</span> (origins) {\n            <span class=\"hljs-comment\">// Check the origin of the request and send a not authorized response if the request origin is not allowed.</span>\n            <span class=\"hljs-keyword\">if</span> (!requestHeaders.<span class=\"hljs-property\">origin</span> || <span class=\"hljs-number\">0</span> &gt; origins.<span class=\"hljs-title function_\">indexOf</span>(requestHeaders.<span class=\"hljs-property\">origin</span>)) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sendNotAuthorized</span>(res);\n            }\n        }\n        <span class=\"hljs-comment\">// If the request is for getting the token.</span>\n        <span class=\"hljs-keyword\">if</span> (requestUrl.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-title class_\">TokenEndPoint</span>)) {\n            <span class=\"hljs-comment\">// Set request property to check later in the response code.</span>\n            req.<span class=\"hljs-property\">tokenRequest</span> = <span class=\"hljs-literal\">true</span>;\n            <span class=\"hljs-comment\">// Change destination to the authentication endpoint in the authentication API.</span>\n            req.<span class=\"hljs-property\">url</span> = settings.<span class=\"hljs-property\">userAuthenticationPath</span>;\n            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">CheckCors</span>({ <span class=\"hljs-attr\">allowedMethods</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span> }, req, res)) {\n                <span class=\"hljs-comment\">// Proxy the request.</span>\n                proxy.<span class=\"hljs-title function_\">web</span>(req, res, { <span class=\"hljs-attr\">target</span>: settings.<span class=\"hljs-property\">authenticationServiceUrl</span> }, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e); });\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Get the service.</span>\n            <span class=\"hljs-keyword\">var</span> service = <span class=\"hljs-title function_\">getServiceForPath</span>(requestUrl);\n            <span class=\"hljs-keyword\">if</span> (!service) {\n                <span class=\"hljs-comment\">// If no service found for the request path, returns a not found.</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sendNotFound</span>(res);\n            }\n            <span class=\"hljs-comment\">// If the method is not OPTIONS and method is not in the allowed methods list ,</span>\n            <span class=\"hljs-comment\">// returns a not allowed response.</span>\n            <span class=\"hljs-keyword\">if</span> (req.<span class=\"hljs-property\">method</span> != <span class=\"hljs-string\">&#x27;OPTIONS&#x27;</span> &amp;&amp; -<span class=\"hljs-number\">1</span> &gt; service.<span class=\"hljs-property\">allowedMethods</span>.<span class=\"hljs-title function_\">indexOf</span>(req.<span class=\"hljs-property\">method</span>)) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sendMethodNotAllowed</span>(res);\n            }\n            <span class=\"hljs-comment\">// If the service needs authentication.</span>\n            <span class=\"hljs-keyword\">if</span> (service.<span class=\"hljs-property\">authenticate</span>) {\n                <span class=\"hljs-comment\">// Request must have the the authorization header.</span>\n                <span class=\"hljs-keyword\">if</span> (requestHeaders.<span class=\"hljs-property\">authorization</span>) {\n                   <span class=\"hljs-comment\">// If Redis has a value for request&#x27;s authentication header value.</span>\n                    redisClient.<span class=\"hljs-title function_\">exists</span>(requestHeaders.<span class=\"hljs-property\">authorization</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, reply</span>) {\n                        <span class=\"hljs-keyword\">if</span> (reply === <span class=\"hljs-number\">1</span>) {\n                            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">CheckCors</span>(service, req, res)) {\n                                <span class=\"hljs-comment\">// Proxy the request to the target service.</span>\n                                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sendToService</span>(service, req, res);\n                            }\n                        } <span class=\"hljs-keyword\">else</span> {\n                            <span class=\"hljs-comment\">// If not authenticated or token has expired , send a not authorized response.</span>\n                            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sendNotAuthorized</span>(res);\n                        }\n                    });\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-comment\">// If authorization header does not exist , then send a not authorized response.</span>\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sendNotAuthorized</span>(res);\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// If the service does not need authentication , proxy the request to the target service.</span>\n                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">CheckCors</span>(service, req, res)) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sendToService</span>(service, req, res);\n                }\n            }\n        }\n    });\n    <span class=\"hljs-comment\">// Listen to the port.</span>\n    server.<span class=\"hljs-title function_\">listen</span>(settings.<span class=\"hljs-property\">listen</span>);\n})();\n</code></pre>"},"page":"Post","topTags":["programming","aws","web","machineLearning","react","javascript","dataScience","typescript","r","csharp"],"relatedPosts":[{"title":"React Form Validation Using Custom Hooks","tags":["web","programming","react","javascript"],"fullUrl":"https://rusith.me/blog/react-form-validation-using-custom-hooks","date":"Mon, Jun 24, 2019","description":"Form validation in react is bit tricky. This is an attempt to make it bit easy by using react hooks. here we write few custom hooks to create a re-usable validation logic that can be used in any form.","banner":null},{"title":"Testing Redux Connected React Components Using Jest","tags":["programming","javascript","react","redux","testing","jest"],"fullUrl":"https://rusith.me/blog/testing-react-redux-connected-components-using-jest","date":"Mon, Apr 27, 2020","description":"Testing React components connected to a Redux store using Jest and React Testing Library.","banner":"/post-data/2020-04-27-testing-redux-connect/banner.png"},{"title":"Deploying a Website on S3 With SSL, Continuous Integration","tags":["aws","programming","web"],"fullUrl":"https://rusith.me/blog/building-a-website-on-s3","date":"Mon, Aug 5, 2019","description":"In this post, I am creating a website and host it on S3 and setup a continuous integration pipeline setup using Gitlab","banner":"/post-data/2019-08-14-building-a-website-on-s3/banner.png"}]},"__N_SSG":true}