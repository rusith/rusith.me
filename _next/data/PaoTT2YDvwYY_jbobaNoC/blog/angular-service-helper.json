{"pageProps":{"post":{"fileName":"2018-04-02-angular-service-helper.md","fullPath":"/home/runner/work/rusith.me/rusith.me/modules/blog/posts/2018-04-02-angular-service-helper.md","title":"Service Helper — Seamlessly Send Request in Angular","tags":["programming","angular","typescript","web"],"comments":true,"description":"When using Angular 2+ to build web stuff , we use services to get data from our back-end services. usually most of these service calls are HTTP requests. Angular provides the Http class to send HTTP request, this has built on the Observable API. When we send a request, it returns an Observable which can be used to use the response returned by the server.","dateCreated":"Thu Mar 15 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","dateModified":"Thu Mar 15 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","datePublished":"Thu Mar 15 2018 00:00:00 GMT+0000 (Coordinated Universal Time)","dependencies":"Angular","about":"Creating a ServiceHelper class to send HTTP requests from Angular applications","path":"/blog/angular-service-helper","oldPath":"/2018/04/02/angular-service-helper","dateCreatedFormatted":"Thu, Mar 15, 2018","fullUrl":"https://rusith.me/blog/angular-service-helper","fileContent":"---\ntitle: Service Helper — Seamlessly Send Request in Angular\ntags: programming angular typescript web\ncomments: true\ndescription: When using Angular 2+ to build web stuff , we use services to get data from our back-end services. usually most of these service calls are HTTP requests. Angular provides the Http class to send HTTP request, this has built on the Observable API. When we send a request, it returns an Observable which can be used to use the response returned by the server.\ndateCreated: 2018-03-15\ndateModified: 2018-03-15\ndatePublished: 2018-03-15\ndependencies: Angular\nabout: Creating a ServiceHelper class to send HTTP requests from Angular applications\npath: /angular-service-helper\noldPath: /2018/04/02/angular-service-helper\n---\n\nWhen using Angular 2+ to build web stuff , we use services to get data from our back-end services. usually most of these service calls are HTTP requests. Angular provides the `Http` class to send HTTP request, this has built on the `Observable` API. When we send a request, it returns an Observable which can be used to use the response returned by the server.\n\nBelow is a Helper class which has built up on this Angular’s API. Which can be easily injected to a service and can be used to build HTTP requests seamlessly with its API that implements the Builder pattern and the Promise API\n\nI have added token authorization support to this implementation. I have to set the `accessToken` property of the service helper instance whenever i change the user token in the app.\n\nI have stored the base URL for my API in the `process.env.apiHost`, This could come from anywhere.\n\nYou can use multiple APIs by adding another function like the `api` function in the service helper.\n\n```ts\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Http, RequestOptions, Headers, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\n\ndeclare const process: any;\n\n/**\n * This is a helper class that will help you  to send Http Requests\n */\n@Injectable()\nexport class ServiceHelper {\n  public accessToken: string;\n  public fetchStart = new EventEmitter<any>();\n  public fetchEnd = new EventEmitter<any>();\n  constructor(protected _http: Http) { }\n  public api(): IRequestBuilder {\n    return new RequestBuilder(this._http, process.env.apiHost, new UserTokenProvider(this), this.fetchStart, this.fetchEnd);\n  }\n\n}\n\nexport interface IRequestBuilder {\n  url(url: string): IRequestBuilder;\n  header(name: string, value: string): IRequestBuilder;\n  noAuth(): IRequestBuilder;\n  post<T>(): Promise<T>;\n  put<T>(): Promise<T>;\n  patch<T>(): Promise<T>;\n  delete<T>(): Promise<T>;\n  needJson(): IRequestBuilder;\n  needUrlencode(): IRequestBuilder;\n  hasJson(): IRequestBuilder;\n  hasUrlencoded(): IRequestBuilder;\n  rowData(data: any): IRequestBuilder;\n  json(data: any): IRequestBuilder;\n  get<T>(queyParameters?: string): Promise<T>;\n  getObserve<T>(queyParameters?: string): Observable<T>;\n  sendFile(files: File[], timenow: any, progress: any);\n}\n\ninterface AuthTokenProvider {\n  getTokenInfo(): { name: string, value: string };\n}\n\nexport type NextCallback<T> = (value: T) => void;\nexport type ErrorCallback<T> = (value: T) => void;\n\n\nclass UserTokenProvider implements AuthTokenProvider {\n  private _serviceHelper: ServiceHelper;\n  constructor(serviceHelper: ServiceHelper) { this._serviceHelper = serviceHelper; }\n  getTokenInfo(): { name: string, value: string } {\n    return this._serviceHelper.accessToken ? { name: 'Authorization', value: ` bearer ${this._serviceHelper.accessToken}` } : null;\n  }\n}\n\nexport class RequestBuilder implements IRequestBuilder {\n\n  private _helper: ServiceHelper;\n  private _request: {\n    url: string, headers: Array<{ name: string, value: string }>,\n    authorize: boolean, data: string\n  } = { url: '', headers: [], authorize: true, data: '' };\n  private _http: Http;\n  private _baseUrl: string;\n  private _tokenProvider: AuthTokenProvider;\n  private _startEvent: EventEmitter<any>;\n  private _endEvent: EventEmitter<any>;\n\n  constructor(http: Http, baseUrl: string, tokenProvider: AuthTokenProvider, start: EventEmitter<any>, end: EventEmitter<any>) {\n    this._http = http;\n    this._baseUrl = baseUrl;\n    this._tokenProvider = tokenProvider;\n    this._startEvent = start;\n    this._endEvent = end;\n    this._request.authorize = true;\n  }\n\n  private getRequestOptions(): RequestOptions {\n    const r = this._request;\n    const requestOptions = new RequestOptions();\n    if (r.authorize) {\n      const tokenInfo = this._tokenProvider.getTokenInfo();\n      if (tokenInfo) {\n        r.headers.push({ name: tokenInfo.name, value: tokenInfo.value });\n      }\n    }\n    if (r.headers && r.headers.length) {\n      const headers = new Headers();\n      r.headers.forEach(header => {\n        headers.append(header.name, header.value);\n      });\n      requestOptions.headers = headers;\n    }\n    requestOptions.withCredentials = false;\n    return requestOptions;\n  }\n\n  url(url: string): IRequestBuilder {\n    this._request.url = url;\n    return this;\n  }\n\n  rowData(data: any): IRequestBuilder {\n    this._request.data = data;\n    return this;\n  }\n\n  json(data: any): IRequestBuilder {\n    this._request.data = JSON.stringify(data);\n    return this.hasJson();\n  }\n\n  header(name: string, value: string): IRequestBuilder {\n    this._request.headers.push({ name, value });\n    return this;\n  }\n\n  noAuth(): IRequestBuilder {\n    this._request.authorize = false;\n    return this;\n  }\n\n  needJson(): IRequestBuilder {\n    this._request.headers.push({ name: 'Accept', value: 'application/json' });\n    return this;\n  }\n\n  needUrlencode(): IRequestBuilder {\n    this._request.headers.push({ name: 'Accept', value: 'application/x-www-form-urlencoded' });\n    return this;\n  }\n\n  hasJson(): IRequestBuilder {\n    this._request.headers.push({ name: 'Content-Type', value: 'application/json' });\n    return this;\n  }\n\n  hasUrlencoded(): IRequestBuilder {\n    this._request.headers.push({ name: 'Content-Type', value: 'application/x-www-form-urlencoded' });\n    return this;\n  }\n\n  post<T>(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this._startEvent.emit();\n      const subscription = this._http.post(this._baseUrl + this._request.url, this._request.data, this.getRequestOptions())\n        .subscribe((response) => { this.next(resolve, response); this._endEvent.emit(); },\n          (e) => { subscription.unsubscribe(); this._endEvent.emit(e); this.error(e, reject); });\n    });\n  }\n\n\n  put<T>(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this._startEvent.emit();\n      const subscription = this._http.put(this._baseUrl + this._request.url, this._request.data, this.getRequestOptions())\n        .subscribe((response) => { this.next(resolve, response); this._endEvent.emit(); },\n          (e) => { subscription.unsubscribe(); this._endEvent.emit(); this.error(e, reject); });\n    });\n\n  }\n\n  patch<T>(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this._startEvent.emit();\n      const subscription = this._http.patch(this._baseUrl + this._request.url, this._request.data, this.getRequestOptions())\n        .subscribe((response) => { this.next(resolve, response); this._endEvent.emit(); },\n          (e) => { subscription.unsubscribe(); this._endEvent.emit(); this.error(e, reject); });\n    });\n\n  }\n\n  delete<T>(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this._startEvent.emit();\n      const subscription = this._http.delete(this._baseUrl + this._request.url, this.getRequestOptions())\n        .subscribe((response) => { this.next(resolve, response); this._endEvent.emit(); },\n          (e) => { subscription.unsubscribe(); this._endEvent.emit(); this.error(e, reject); });\n    });\n\n  }\n\n  get<T>(queyParameters = ''): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this._startEvent.emit();\n      const subscription = this._http.get(this._baseUrl + this._request.url + '?' + queyParameters, this.getRequestOptions())\n        .subscribe((response) => { this.next(resolve, response); this._endEvent.emit(); },\n          (e) => { subscription.unsubscribe(); this._endEvent.emit(); this.error(e, reject); });\n    });\n  }\n\n  getObserve<T>(queyParameters = ''): Observable<T> {\n    this._startEvent.emit();\n    return this._http.get(this._baseUrl + this._request.url + '?' + queyParameters, this.getRequestOptions())\n      .map(r => this.next(null, r));\n  }\n\n  sendFile(files: File[], timenow: any, progress: any): Observable<any> {\n    const url = this._baseUrl + this._request.url;\n    return Observable.create(observer => {\n      const formData: FormData = new FormData(),\n        xhr: XMLHttpRequest = new XMLHttpRequest();\n\n      for (let i = 0; i < files.length; i++) {\n        formData.append('uploads[]', files[i], files[i].name);\n      }\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            observer.next(JSON.parse(xhr.response));\n            observer.complete();\n          } else {\n            observer.error(xhr.response);\n          }\n        }\n      };\n      xhr.upload.onprogress = (event) => {\n        progress(Math.round(event.loaded / event.total * 100));\n      };\n      xhr.open('POST', url, true);\n\n      if (this._request.authorize) {\n        const tokenInfo = this._tokenProvider.getTokenInfo();\n        if (tokenInfo) {\n          xhr.setRequestHeader(tokenInfo.name, tokenInfo.value);\n        }\n      }\n      const serverFileName = xhr.send(formData);\n    });\n  }\n\n  private error(e, callback) {\n    if (e.status === 404) {\n      callback('Requested resource not found');\n    } else {\n      callback(e.json());\n    }\n  }\n\n  private next(n, data): any {\n    try {\n      const d = data.json();\n      if (n) {\n        n(d);\n      }\n      return d;\n    } catch (e) {\n      if (n) {\n        n({});\n      }\n      return {};\n    }\n  }\n}\n```\n\n## How to Use\n\nBelow is a very simple usage of the service helper class. Which has some calls to an order API\n\nWhen using the service, you can handle errors just like you do with normal promises.\n\n```ts\nimport { Injectable } from '@angular/core';\nimport { ServiceHelper } from '../base/service.helper';\nimport OrderModel from './../models/order.model.ts';\n\n@Injectable()\nexport default class OrderService {\n\n  /* We inject the service helper */\n  constructor(private _: ServiceHelper) {}\n\n  getAllOrders(searchText = ''): Promise<Array<OrderModel>> {\n    return this._.api()\n      .url('orders')\n      .needJson()\n      .get(`searchText=${searchText}`);\n  }\n\n  getAnOrder(id: number): Promise<Array<OrderModel>> {\n    return this._.api()\n      .url(`orders/${id}`)\n      .needJson()\n      .get();\n  }\n\n  addAnOrder(order: OrderModel): Promise<OrderModel> {\n    return this._.api()\n      .url('orders')\n      .json(order)\n      .needJson()\n      .post();\n  }\n\n  updateAnOrder(order: OrderModel): Promise<OrderModel> {\n    return this._.api()\n      .url(`orders/${order.id}`)\n      .json(order)\n      .needJson()\n      .patch();\n  }\n\n  deleteAnOrder(id: number): Promise<OrderModel> {\n    return this._.api()\n      .url(`orders/${id}`)\n      .needJson()\n      .delete();\n  }\n}\n```\n","parsedContent":"<p>When using Angular 2+ to build web stuff , we use services to get data from our back-end services. usually most of these service calls are HTTP requests. Angular provides the <code>Http</code> class to send HTTP request, this has built on the <code>Observable</code> API. When we send a request, it returns an Observable which can be used to use the response returned by the server.</p>\n<p>Below is a Helper class which has built up on this Angular’s API. Which can be easily injected to a service and can be used to build HTTP requests seamlessly with its API that implements the Builder pattern and the Promise API</p>\n<p>I have added token authorization support to this implementation. I have to set the <code>accessToken</code> property of the service helper instance whenever i change the user token in the app.</p>\n<p>I have stored the base URL for my API in the <code>process.env.apiHost</code>, This could come from anywhere.</p>\n<p>You can use multiple APIs by adding another function like the <code>api</code> function in the service helper.</p>\n<pre><code class=\"hljs ts language-ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">EventEmitter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Http</span>, <span class=\"hljs-title class_\">RequestOptions</span>, <span class=\"hljs-title class_\">Headers</span>, <span class=\"hljs-title class_\">Response</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/http&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Observable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;rxjs/Rx&#x27;</span>;\n\n<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">process</span>: <span class=\"hljs-built_in\">any</span>;\n\n<span class=\"hljs-comment\">/**\n * This is a helper class that will help you  to send Http Requests\n */</span>\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ServiceHelper</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-attr\">accessToken</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-keyword\">public</span> fetchStart = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>&lt;<span class=\"hljs-built_in\">any</span>&gt;();\n  <span class=\"hljs-keyword\">public</span> fetchEnd = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventEmitter</span>&lt;<span class=\"hljs-built_in\">any</span>&gt;();\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">protected</span> _http: Http</span>) { }\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">api</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestBuilder</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_http</span>, process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">apiHost</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserTokenProvider</span>(<span class=\"hljs-variable language_\">this</span>), <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fetchStart</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fetchEnd</span>);\n  }\n\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IRequestBuilder</span> {\n  <span class=\"hljs-title function_\">url</span>(<span class=\"hljs-attr\">url</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  <span class=\"hljs-title function_\">header</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  <span class=\"hljs-title function_\">noAuth</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  post&lt;T&gt;(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt;;\n  put&lt;T&gt;(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt;;\n  patch&lt;T&gt;(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt;;\n  <span class=\"hljs-keyword\">delete</span>&lt;T&gt;(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt;;\n  <span class=\"hljs-title function_\">needJson</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  <span class=\"hljs-title function_\">needUrlencode</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  <span class=\"hljs-title function_\">hasJson</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  <span class=\"hljs-title function_\">hasUrlencoded</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  <span class=\"hljs-title function_\">rowData</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  <span class=\"hljs-title function_\">json</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-title class_\">IRequestBuilder</span>;\n  get&lt;T&gt;(queyParameters?: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt;;\n  getObserve&lt;T&gt;(queyParameters?: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Observable</span>&lt;T&gt;;\n  <span class=\"hljs-title function_\">sendFile</span>(<span class=\"hljs-attr\">files</span>: <span class=\"hljs-title class_\">File</span>[], <span class=\"hljs-attr\">timenow</span>: <span class=\"hljs-built_in\">any</span>, <span class=\"hljs-attr\">progress</span>: <span class=\"hljs-built_in\">any</span>);\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">AuthTokenProvider</span> {\n  <span class=\"hljs-title function_\">getTokenInfo</span>(): { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span> };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">NextCallback</span>&lt;T&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">value: T</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ErrorCallback</span>&lt;T&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">value: T</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserTokenProvider</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AuthTokenProvider</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_serviceHelper</span>: <span class=\"hljs-title class_\">ServiceHelper</span>;\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">serviceHelper: ServiceHelper</span>) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_serviceHelper</span> = serviceHelper; }\n  <span class=\"hljs-title function_\">getTokenInfo</span>(): { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span> } {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_serviceHelper</span>.<span class=\"hljs-property\">accessToken</span> ? { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Authorization&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">` bearer <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>._serviceHelper.accessToken}</span>`</span> } : <span class=\"hljs-literal\">null</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestBuilder</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IRequestBuilder</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_helper</span>: <span class=\"hljs-title class_\">ServiceHelper</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_request</span>: {\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">headers</span>: <span class=\"hljs-title class_\">Array</span>&lt;{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span> }&gt;,\n    <span class=\"hljs-attr\">authorize</span>: <span class=\"hljs-built_in\">boolean</span>, <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">string</span>\n  } = { <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">headers</span>: [], <span class=\"hljs-attr\">authorize</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">&#x27;&#x27;</span> };\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_http</span>: <span class=\"hljs-title class_\">Http</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_baseUrl</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_tokenProvider</span>: <span class=\"hljs-title class_\">AuthTokenProvider</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_startEvent</span>: <span class=\"hljs-title class_\">EventEmitter</span>&lt;<span class=\"hljs-built_in\">any</span>&gt;;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">_endEvent</span>: <span class=\"hljs-title class_\">EventEmitter</span>&lt;<span class=\"hljs-built_in\">any</span>&gt;;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">http: Http, baseUrl: <span class=\"hljs-built_in\">string</span>, tokenProvider: AuthTokenProvider, start: EventEmitter&lt;<span class=\"hljs-built_in\">any</span>&gt;, end: EventEmitter&lt;<span class=\"hljs-built_in\">any</span>&gt;</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_http</span> = http;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_baseUrl</span> = baseUrl;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_tokenProvider</span> = tokenProvider;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_startEvent</span> = start;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span> = end;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">authorize</span> = <span class=\"hljs-literal\">true</span>;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">getRequestOptions</span>(): <span class=\"hljs-title class_\">RequestOptions</span> {\n    <span class=\"hljs-keyword\">const</span> r = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>;\n    <span class=\"hljs-keyword\">const</span> requestOptions = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestOptions</span>();\n    <span class=\"hljs-keyword\">if</span> (r.<span class=\"hljs-property\">authorize</span>) {\n      <span class=\"hljs-keyword\">const</span> tokenInfo = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_tokenProvider</span>.<span class=\"hljs-title function_\">getTokenInfo</span>();\n      <span class=\"hljs-keyword\">if</span> (tokenInfo) {\n        r.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">name</span>: tokenInfo.<span class=\"hljs-property\">name</span>, <span class=\"hljs-attr\">value</span>: tokenInfo.<span class=\"hljs-property\">value</span> });\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (r.<span class=\"hljs-property\">headers</span> &amp;&amp; r.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">const</span> headers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Headers</span>();\n      r.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">header</span> =&gt;</span> {\n        headers.<span class=\"hljs-title function_\">append</span>(header.<span class=\"hljs-property\">name</span>, header.<span class=\"hljs-property\">value</span>);\n      });\n      requestOptions.<span class=\"hljs-property\">headers</span> = headers;\n    }\n    requestOptions.<span class=\"hljs-property\">withCredentials</span> = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> requestOptions;\n  }\n\n  <span class=\"hljs-title function_\">url</span>(<span class=\"hljs-attr\">url</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">url</span> = url;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">rowData</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">data</span> = data;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">json</span>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">data</span> = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(data);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">hasJson</span>();\n  }\n\n  <span class=\"hljs-title function_\">header</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">push</span>({ name, value });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">noAuth</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">authorize</span> = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">needJson</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Accept&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span> });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">needUrlencode</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Accept&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span> });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">hasJson</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span> });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  <span class=\"hljs-title function_\">hasUrlencoded</span>(): <span class=\"hljs-title class_\">IRequestBuilder</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span> });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>;\n  }\n\n  post&lt;T&gt;(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_startEvent</span>.<span class=\"hljs-title function_\">emit</span>();\n      <span class=\"hljs-keyword\">const</span> subscription = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_http</span>.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_baseUrl</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">url</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">data</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getRequestOptions</span>())\n        .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">next</span>(resolve, response); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); },\n          <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> { subscription.<span class=\"hljs-title function_\">unsubscribe</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(e); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">error</span>(e, reject); });\n    });\n  }\n\n\n  put&lt;T&gt;(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_startEvent</span>.<span class=\"hljs-title function_\">emit</span>();\n      <span class=\"hljs-keyword\">const</span> subscription = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_http</span>.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_baseUrl</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">url</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">data</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getRequestOptions</span>())\n        .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">next</span>(resolve, response); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); },\n          <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> { subscription.<span class=\"hljs-title function_\">unsubscribe</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">error</span>(e, reject); });\n    });\n\n  }\n\n  patch&lt;T&gt;(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_startEvent</span>.<span class=\"hljs-title function_\">emit</span>();\n      <span class=\"hljs-keyword\">const</span> subscription = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_http</span>.<span class=\"hljs-title function_\">patch</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_baseUrl</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">url</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">data</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getRequestOptions</span>())\n        .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">next</span>(resolve, response); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); },\n          <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> { subscription.<span class=\"hljs-title function_\">unsubscribe</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">error</span>(e, reject); });\n    });\n\n  }\n\n  <span class=\"hljs-keyword\">delete</span>&lt;T&gt;(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_startEvent</span>.<span class=\"hljs-title function_\">emit</span>();\n      <span class=\"hljs-keyword\">const</span> subscription = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_http</span>.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_baseUrl</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">url</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getRequestOptions</span>())\n        .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">next</span>(resolve, response); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); },\n          <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> { subscription.<span class=\"hljs-title function_\">unsubscribe</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">error</span>(e, reject); });\n    });\n\n  }\n\n  get&lt;T&gt;(queyParameters = <span class=\"hljs-string\">&#x27;&#x27;</span>): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_startEvent</span>.<span class=\"hljs-title function_\">emit</span>();\n      <span class=\"hljs-keyword\">const</span> subscription = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_http</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_baseUrl</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">url</span> + <span class=\"hljs-string\">&#x27;?&#x27;</span> + queyParameters, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getRequestOptions</span>())\n        .<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">next</span>(resolve, response); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); },\n          <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> { subscription.<span class=\"hljs-title function_\">unsubscribe</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_endEvent</span>.<span class=\"hljs-title function_\">emit</span>(); <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">error</span>(e, reject); });\n    });\n  }\n\n  getObserve&lt;T&gt;(queyParameters = <span class=\"hljs-string\">&#x27;&#x27;</span>): <span class=\"hljs-title class_\">Observable</span>&lt;T&gt; {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_startEvent</span>.<span class=\"hljs-title function_\">emit</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_http</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_baseUrl</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">url</span> + <span class=\"hljs-string\">&#x27;?&#x27;</span> + queyParameters, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getRequestOptions</span>())\n      .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =&gt;</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-literal\">null</span>, r));\n  }\n\n  <span class=\"hljs-title function_\">sendFile</span>(<span class=\"hljs-attr\">files</span>: <span class=\"hljs-title class_\">File</span>[], <span class=\"hljs-attr\">timenow</span>: <span class=\"hljs-built_in\">any</span>, <span class=\"hljs-attr\">progress</span>: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-title class_\">Observable</span>&lt;<span class=\"hljs-built_in\">any</span>&gt; {\n    <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_baseUrl</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">url</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Observable</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">observer</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">formData</span>: <span class=\"hljs-title class_\">FormData</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>(),\n        <span class=\"hljs-attr\">xhr</span>: <span class=\"hljs-title class_\">XMLHttpRequest</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; files.<span class=\"hljs-property\">length</span>; i++) {\n        formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&#x27;uploads[]&#x27;</span>, files[i], files[i].<span class=\"hljs-property\">name</span>);\n      }\n\n      xhr.<span class=\"hljs-property\">onreadystatechange</span> = <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (xhr.<span class=\"hljs-property\">readyState</span> === <span class=\"hljs-number\">4</span>) {\n          <span class=\"hljs-keyword\">if</span> (xhr.<span class=\"hljs-property\">status</span> === <span class=\"hljs-number\">200</span>) {\n            observer.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(xhr.<span class=\"hljs-property\">response</span>));\n            observer.<span class=\"hljs-title function_\">complete</span>();\n          } <span class=\"hljs-keyword\">else</span> {\n            observer.<span class=\"hljs-title function_\">error</span>(xhr.<span class=\"hljs-property\">response</span>);\n          }\n        }\n      };\n      xhr.<span class=\"hljs-property\">upload</span>.<span class=\"hljs-property\">onprogress</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\n        <span class=\"hljs-title function_\">progress</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(event.<span class=\"hljs-property\">loaded</span> / event.<span class=\"hljs-property\">total</span> * <span class=\"hljs-number\">100</span>));\n      };\n      xhr.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&#x27;POST&#x27;</span>, url, <span class=\"hljs-literal\">true</span>);\n\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_request</span>.<span class=\"hljs-property\">authorize</span>) {\n        <span class=\"hljs-keyword\">const</span> tokenInfo = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_tokenProvider</span>.<span class=\"hljs-title function_\">getTokenInfo</span>();\n        <span class=\"hljs-keyword\">if</span> (tokenInfo) {\n          xhr.<span class=\"hljs-title function_\">setRequestHeader</span>(tokenInfo.<span class=\"hljs-property\">name</span>, tokenInfo.<span class=\"hljs-property\">value</span>);\n        }\n      }\n      <span class=\"hljs-keyword\">const</span> serverFileName = xhr.<span class=\"hljs-title function_\">send</span>(formData);\n    });\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">error</span>(<span class=\"hljs-params\">e, callback</span>) {\n    <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">status</span> === <span class=\"hljs-number\">404</span>) {\n      <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-string\">&#x27;Requested resource not found&#x27;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-title function_\">callback</span>(e.<span class=\"hljs-title function_\">json</span>());\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">next</span>(n, data): <span class=\"hljs-built_in\">any</span> {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> d = data.<span class=\"hljs-title function_\">json</span>();\n      <span class=\"hljs-keyword\">if</span> (n) {\n        <span class=\"hljs-title function_\">n</span>(d);\n      }\n      <span class=\"hljs-keyword\">return</span> d;\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-keyword\">if</span> (n) {\n        <span class=\"hljs-title function_\">n</span>({});\n      }\n      <span class=\"hljs-keyword\">return</span> {};\n    }\n  }\n}\n</code></pre>\n<h2 id=\"howtouse\">How to Use</h2>\n<p>Below is a very simple usage of the service helper class. Which has some calls to an order API</p>\n<p>When using the service, you can handle errors just like you do with normal promises.</p>\n<pre><code class=\"hljs ts language-ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ServiceHelper</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../base/service.helper&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">OrderModel</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./../models/order.model.ts&#x27;</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderService</span> {\n\n  <span class=\"hljs-comment\">/* We inject the service helper */</span>\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> _: ServiceHelper</span>) {}\n\n  <span class=\"hljs-title function_\">getAllOrders</span>(searchText = <span class=\"hljs-string\">&#x27;&#x27;</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-title class_\">OrderModel</span>&gt;&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_</span>.<span class=\"hljs-title function_\">api</span>()\n      .<span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">&#x27;orders&#x27;</span>)\n      .<span class=\"hljs-title function_\">needJson</span>()\n      .<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">`searchText=<span class=\"hljs-subst\">${searchText}</span>`</span>);\n  }\n\n  <span class=\"hljs-title function_\">getAnOrder</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-title class_\">OrderModel</span>&gt;&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_</span>.<span class=\"hljs-title function_\">api</span>()\n      .<span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">`orders/<span class=\"hljs-subst\">${id}</span>`</span>)\n      .<span class=\"hljs-title function_\">needJson</span>()\n      .<span class=\"hljs-title function_\">get</span>();\n  }\n\n  <span class=\"hljs-title function_\">addAnOrder</span>(<span class=\"hljs-attr\">order</span>: <span class=\"hljs-title class_\">OrderModel</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">OrderModel</span>&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_</span>.<span class=\"hljs-title function_\">api</span>()\n      .<span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">&#x27;orders&#x27;</span>)\n      .<span class=\"hljs-title function_\">json</span>(order)\n      .<span class=\"hljs-title function_\">needJson</span>()\n      .<span class=\"hljs-title function_\">post</span>();\n  }\n\n  <span class=\"hljs-title function_\">updateAnOrder</span>(<span class=\"hljs-attr\">order</span>: <span class=\"hljs-title class_\">OrderModel</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">OrderModel</span>&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_</span>.<span class=\"hljs-title function_\">api</span>()\n      .<span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">`orders/<span class=\"hljs-subst\">${order.id}</span>`</span>)\n      .<span class=\"hljs-title function_\">json</span>(order)\n      .<span class=\"hljs-title function_\">needJson</span>()\n      .<span class=\"hljs-title function_\">patch</span>();\n  }\n\n  <span class=\"hljs-title function_\">deleteAnOrder</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-title class_\">OrderModel</span>&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_</span>.<span class=\"hljs-title function_\">api</span>()\n      .<span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">`orders/<span class=\"hljs-subst\">${id}</span>`</span>)\n      .<span class=\"hljs-title function_\">needJson</span>()\n      .<span class=\"hljs-title function_\">delete</span>();\n  }\n}\n</code></pre>"},"page":"Post","topTags":["programming","aws","web","machineLearning","react","javascript","dataScience","typescript","r","csharp"],"relatedPosts":[{"title":"Deploying an app on AWS ECS with CDK","tags":["programming","nextJS","react","aws","ecs","typescript","cdk","devops"],"fullUrl":"https://rusith.me/blog/deploy-app-on-aws-ecs-with-cdk-auto-scaling-and-load-balancing","date":"Wed, Feb 15, 2023","description":"How to deploy an application on AWS ECS with load-balancing and auto-scaling using CDK by writing the CDK code in TypeScript","banner":"/post-data/2023-02-15-deploying-react-app-on-ecs/banner.png"},{"title":"Deploying a Website on S3 With SSL, Continuous Integration","tags":["aws","programming","web"],"fullUrl":"https://rusith.me/blog/building-a-website-on-s3","date":"Mon, Aug 5, 2019","description":"In this post, I am creating a website and host it on S3 and setup a continuous integration pipeline setup using Gitlab","banner":"/post-data/2019-08-14-building-a-website-on-s3/banner.png"},{"title":"React Form Validation Using Custom Hooks","tags":["web","programming","react","javascript"],"fullUrl":"https://rusith.me/blog/react-form-validation-using-custom-hooks","date":"Mon, Jun 24, 2019","description":"Form validation in react is bit tricky. This is an attempt to make it bit easy by using react hooks. here we write few custom hooks to create a re-usable validation logic that can be used in any form.","banner":null}]},"__N_SSG":true}