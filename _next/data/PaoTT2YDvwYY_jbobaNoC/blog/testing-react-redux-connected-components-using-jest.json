{"pageProps":{"post":{"fileName":"2020-04-27-testing-redux-connect.md","fullPath":"/home/runner/work/rusith.me/rusith.me/modules/blog/posts/2020-04-27-testing-redux-connect.md","layout":"post","title":"Testing Redux Connected React Components Using Jest","tags":["programming","javascript","react","redux","testing","jest"],"comments":true,"description":"Testing React components connected to a Redux store using Jest and React Testing Library.","dateCreated":"Mon Apr 27 2020 00:00:00 GMT+0000 (Coordinated Universal Time)","dateModified":"Mon Apr 27 2020 00:00:00 GMT+0000 (Coordinated Universal Time)","datePublished":"Mon Apr 27 2020 00:00:00 GMT+0000 (Coordinated Universal Time)","dependencies":"React","about":"Testing React components connected Redux store using Jest and React Testing Library","banner":"/post-data/2020-04-27-testing-redux-connect/banner.png","path":"/blog/testing-react-redux-connected-components-using-jest","dateCreatedFormatted":"Mon, Apr 27, 2020","fullUrl":"https://rusith.me/blog/testing-react-redux-connected-components-using-jest","oldPath":null,"fileContent":"---\nlayout: post\ntitle: Testing Redux Connected React Components Using Jest\ntags: programming javascript react redux testing jest\ncomments: true\ndescription: Testing React components connected to a Redux store using Jest and React Testing Library.\ndateCreated: 2020-04-27\ndateModified: 2020-04-27\ndatePublished: 2020-04-27\ndependencies: React\nabout: Testing React components connected Redux store using Jest and React Testing Library\nbanner: /post-data/2020-04-27-testing-redux-connect/banner.png\npath: /testing-react-redux-connected-components-using-jest\n---\n\n<img alt=\"Page banner\" class=\"$$styles.banner\" src=\"$$page_banner_full_path\">\n\nWhen writing tests for a React application you might come across the case where you have to test a React\ncomponent that is connected to a Redux store using the `connect` function.\nTesting these components in isolation might look complicated.\nreasons being that the component is wrapped in a HOC so we don't have direct access to the component properties.\nand the connect function takes Redux into the picture, so we have a whole layer to mock.\n\nLet's take this simple login component as an example throughout this article.\n\n```tsx\nimport React, { useEffect } from \"react\"\nimport { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { ILoginState, login } from \"./state\"\n\ninterface ILoginProps {\n  loading: boolean\n  error: string\n}\n\ninterface IDispatchProps {\n  doLogin: typeof login\n}\n\ntype Props = ILoginProps & IDispatchProps\n\nconst Login: React.FC<Props> = ({ loading, error, doLogin }) => {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [showError, setShowError] = useState(false)\n\n  useEffect(() => {\n    setShowError(!!error)\n  }, [error])\n\n  const handleLogin = (e) => {\n    const form = e.currentTarget\n    e.preventDefault()\n    e.stopPropagation()\n\n    if (form.checkValidity()) {\n      doLogin({ email, password })\n    }\n  }\n\n  return (\n    <div className=\"log-in\">\n      {loading && <img data-testid=\"loader\" alt=\"Loading\" className=\"loading\" />}\n      {showError && (\n        <p data-testid=\"errorMessage\" className=\"error\">\n          {error}\n        </p>\n      )}\n      <form onSubmit={handleLogin}>\n        <input data-testid=\"emailInput\" required type=\"email\" onChange={(e) => setEmail(e.target.value)} />\n        <input data-testid=\"passwordInput\" required type=\"password\" onChange={(e) => setPassword(e.target.value)} />\n\n        <button type=\"submit\" data-testid=\"loginTrigger\">\n          Log In\n        </button>\n      </form>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: ILoginState): ILoginProps => ({\n  error: state.error,\n  loading: state.loading\n})\n\nconst mapDispatchToProps = {\n  doLogin: login\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\n```\n\nAnd in the same location, the state,\n\n```tsx\nexport function login(loginInfo) {\n  return {\n    payload: loginInfo,\n    type: \"LOGIN\"\n  }\n}\n\nexport interface ILoginState {\n  loading: boolean\n  error: string\n}\n```\n\n## How to Test\n\nAs we are going to test the component, First thing we have to do is to isolate it.\nA Redux based component can communicate in two ways. It can dispatch actions\nand it can take store updates as props. So that's what we are going to test.\nIt should dispatch the right actions with the right parameters and it should render the data as intended.\n\n### Mocking the Store\n\nTo isolate the component, we have to find a way to mock the store and render the component using mock data.\n<a href=\"https://www.npmjs.com/package/redux-mock-store\" target=\"_blank\">redux-mock-store</a> is a package that allows us to mock the Redux store.\nThis will record all actions that are dispatched to the store.\n\nLet's create a helper function that will render the component and return the store and the component itself.\n\n```tsx\nfunction renderComponent(state: ILoginState) {\n  const store = mockStore(state)\n  return [\n    render(\n      <Provider store={store}>\n        <LogIn />\n      </Provider>\n    ),\n    store\n  ]\n}\n```\n\nNow we can use this to render the component inside the Redux provider.\n\n### Testing Dispatch\n\nLet's write our first test. This will test if the component dispatches\nthe login action when the inputs are valid.\n\n```tsx\nit(\"should dispatch login action if inputs are valid\", () => {\n  const [{ getByTestId }, store] = renderComponent({\n    loading: false,\n    error: null\n  })\n\n  fireEvent.change(getByTestId(\"emailInput\"), {\n    target: { value: \"user_one@gmail.com\" }\n  })\n\n  fireEvent.change(getByTestId(\"passwordInput\"), {\n    target: { value: \"password\" }\n  })\n\n  fireEvent.click(getByTestId(\"loginTrigger\"))\n\n  expect(store.getActions()).toContainEqual(login({ email: \"user_one@gmail.com\", password: \"password\" }))\n})\n```\n\nHere, we submit the form using `fireEvent`. and we expect the list of actions (`getActions()`) of the store\nto contain login action with the right payload. This way we can simulate user behaviors and check if\nit calls correct action.\n\n### Testing Props\n\nMost of the time, we want to change the UI based on the input props.\nTo do this, we can pass any state to the `renderComponent` and write assertions based on the expected behavior.\n\nFor example, let's write two tests to see if we only render the loading indicator when `loading` is set to true.\n\n```tsx\nit(\"should show loading indicator when loading is set to true\", () => {\n  const [{ queryByTestId }] = renderComponent({ loading: true } as ILoginState)\n  expect(queryByTestId(\"loader\")).toBeTruthy()\n})\n\nit(\"should not show loading indicator when loading is set to false\", () => {\n  const [{ queryByTestId }] = renderComponent({ loading: false } as ILoginState)\n  expect(queryByTestId(\"loader\")).toBeFalsy()\n})\n```\n\nAs you can see we just have to pass the current state that we want and write assertions accordingly.\n\n### Testing Effects\n\nThe Login component has an effect that checks the prop `error` and set `showError`.\nTo test this, we have to change the inputs of the component. As our store cannot publish\na new state to the components, what we can do is to re-render the component with the new state.\nThis will update the props of the component and will run the effect.\n\nLet's write a test for this behavior.\n\n```tsx\nit(\"should show error if an error is available\", () => {\n  renderComponent({ loading: false, error: null })\n  const [{ getByTestId }] = renderComponent({\n    loading: false,\n    error: \"something went wrong\"\n  })\n\n  expect(getByTestId(\"errorMessage\")).toHaveTextContent(\"something went wrong\")\n})\n```\n\nBelow is the complete test file for this component.\n\n```tsx\nimport \"@testing-library/jest-dom/extend-expect\"\nimport { cleanup, fireEvent, render } from \"@testing-library/react\"\nimport React from \"react\"\nimport { Provider } from \"react-redux\"\nimport configureStore from \"redux-mock-store\"\nimport LogIn from \"./LogIn\"\nimport { ILoginState, login } from \"./state\"\n\nconst mockStore = configureStore([])\ndescribe(\"Login\", () => {\n  function renderComponent(state: ILoginState) {\n    const store = mockStore(state)\n    return [\n      render(\n        <Provider store={store}>\n          <LogIn />\n        </Provider>\n      ),\n      store\n    ]\n  }\n\n  afterAll(cleanup)\n\n  it(\"should dispatch login action if inputs are valid\", () => {\n    const [{ getByTestId }, store] = renderComponent({\n      loading: false,\n      error: null\n    })\n\n    fireEvent.change(getByTestId(\"emailInput\"), {\n      target: { value: \"user_one@gmail.com\" }\n    })\n\n    fireEvent.change(getByTestId(\"passwordInput\"), {\n      target: { value: \"password\" }\n    })\n\n    fireEvent.click(getByTestId(\"loginTrigger\"))\n\n    expect(store.getActions()).toContainEqual(login({ email: \"user_one@gmail.com\", password: \"password\" }))\n  })\n\n  it(\"should show loading indicator when loading is set to true\", () => {\n    const [{ queryByTestId }] = renderComponent({\n      loading: true\n    } as ILoginState)\n    expect(queryByTestId(\"loader\")).toBeTruthy()\n  })\n\n  it(\"should not show loading indicator when loading is set to false\", () => {\n    const [{ queryByTestId }] = renderComponent({\n      loading: false\n    } as ILoginState)\n    expect(queryByTestId(\"loader\")).toBeFalsy()\n  })\n\n  it(\"should show error if an error is available\", () => {\n    renderComponent({ loading: false, error: null })\n    const [{ getByTestId }] = renderComponent({\n      loading: false,\n      error: \"something went wrong\"\n    })\n\n    expect(getByTestId(\"errorMessage\")).toHaveTextContent(\"something went wrong\")\n  })\n})\n```\n","parsedContent":"<p><img alt=\"Page banner\" class=\"Post_banner__soX4H\" src=\"https://rusith.me/post-data/2020-04-27-testing-redux-connect/banner.png\"></p>\n<p>When writing tests for a React application you might come across the case where you have to test a React\ncomponent that is connected to a Redux store using the <code>connect</code> function.\nTesting these components in isolation might look complicated.\nreasons being that the component is wrapped in a HOC so we don't have direct access to the component properties.\nand the connect function takes Redux into the picture, so we have a whole layer to mock.</p>\n<p>Let's take this simple login component as an example throughout this article.</p>\n<pre><code class=\"hljs tsx language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>\n<span class=\"hljs-keyword\">import</span> { connect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-redux&quot;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ILoginState</span>, login } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./state&quot;</span>\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ILoginProps</span> {\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-built_in\">boolean</span>\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-built_in\">string</span>\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IDispatchProps</span> {\n  <span class=\"hljs-attr\">doLogin</span>: <span class=\"hljs-keyword\">typeof</span> login\n}\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Props</span> = <span class=\"hljs-title class_\">ILoginProps</span> &amp; <span class=\"hljs-title class_\">IDispatchProps</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Login</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span>&lt;<span class=\"hljs-title class_\">Props</span>&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ loading, error, doLogin }</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\n  <span class=\"hljs-keyword\">const</span> [password, setPassword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\n  <span class=\"hljs-keyword\">const</span> [showError, setShowError] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>)\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setShowError</span>(!!error)\n  }, [error])\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleLogin</span> = (<span class=\"hljs-params\">e</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> form = e.<span class=\"hljs-property\">currentTarget</span>\n    e.<span class=\"hljs-title function_\">preventDefault</span>()\n    e.<span class=\"hljs-title function_\">stopPropagation</span>()\n\n    <span class=\"hljs-keyword\">if</span> (form.<span class=\"hljs-title function_\">checkValidity</span>()) {\n      <span class=\"hljs-title function_\">doLogin</span>({ email, password })\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;log-in&quot;</span>&gt;</span>\n      {loading &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">data-testid</span>=<span class=\"hljs-string\">&quot;loader&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Loading&quot;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;loading&quot;</span> /&gt;</span>}\n      {showError &amp;&amp; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">data-testid</span>=<span class=\"hljs-string\">&quot;errorMessage&quot;</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;error&quot;</span>&gt;</span>\n          {error}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      )}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleLogin}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">data-testid</span>=<span class=\"hljs-string\">&quot;emailInput&quot;</span> <span class=\"hljs-attr\">required</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setEmail(e.target.value)} /&gt;\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">data-testid</span>=<span class=\"hljs-string\">&quot;passwordInput&quot;</span> <span class=\"hljs-attr\">required</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setPassword(e.target.value)} /&gt;\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">data-testid</span>=<span class=\"hljs-string\">&quot;loginTrigger&quot;</span>&gt;</span>\n          Log In\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n\n<span class=\"hljs-keyword\">const</span> mapStateToProps = (<span class=\"hljs-attr\">state</span>: <span class=\"hljs-title class_\">ILoginState</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">ILoginProps</span> =&gt;</span> ({\n  <span class=\"hljs-attr\">error</span>: state.<span class=\"hljs-property\">error</span>,\n  <span class=\"hljs-attr\">loading</span>: state.<span class=\"hljs-property\">loading</span>\n})\n\n<span class=\"hljs-keyword\">const</span> mapDispatchToProps = {\n  <span class=\"hljs-attr\">doLogin</span>: login\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"hljs-title class_\">Login</span>)\n</code></pre>\n<p>And in the same location, the state,</p>\n<pre><code class=\"hljs tsx language-tsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">loginInfo</span>) {\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">payload</span>: loginInfo,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;LOGIN&quot;</span>\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ILoginState</span> {\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-built_in\">boolean</span>\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-built_in\">string</span>\n}\n</code></pre>\n<h2 id=\"howtotest\">How to Test</h2>\n<p>As we are going to test the component, First thing we have to do is to isolate it.\nA Redux based component can communicate in two ways. It can dispatch actions\nand it can take store updates as props. So that's what we are going to test.\nIt should dispatch the right actions with the right parameters and it should render the data as intended.</p>\n<h3 id=\"mockingthestore\">Mocking the Store</h3>\n<p>To isolate the component, we have to find a way to mock the store and render the component using mock data.\n<a href=\"https://www.npmjs.com/package/redux-mock-store\" target=\"_blank\">redux-mock-store</a> is a package that allows us to mock the Redux store.\nThis will record all actions that are dispatched to the store.</p>\n<p>Let's create a helper function that will render the component and return the store and the component itself.</p>\n<pre><code class=\"hljs tsx language-tsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">renderComponent</span>(<span class=\"hljs-params\">state: ILoginState</span>) {\n  <span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">mockStore</span>(state)\n  <span class=\"hljs-keyword\">return</span> [\n    <span class=\"hljs-title function_\">render</span>(\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span>=<span class=\"hljs-string\">{store}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LogIn</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Provider</span>&gt;</span></span>\n    ),\n    store\n  ]\n}\n</code></pre>\n<p>Now we can use this to render the component inside the Redux provider.</p>\n<h3 id=\"testingdispatch\">Testing Dispatch</h3>\n<p>Let's write our first test. This will test if the component dispatches\nthe login action when the inputs are valid.</p>\n<pre><code class=\"hljs tsx language-tsx\"><span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should dispatch login action if inputs are valid&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> [{ getByTestId }, store] = <span class=\"hljs-title function_\">renderComponent</span>({\n    <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span>\n  })\n\n  fireEvent.<span class=\"hljs-title function_\">change</span>(<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;emailInput&quot;</span>), {\n    <span class=\"hljs-attr\">target</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;user_one@gmail.com&quot;</span> }\n  })\n\n  fireEvent.<span class=\"hljs-title function_\">change</span>(<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;passwordInput&quot;</span>), {\n    <span class=\"hljs-attr\">target</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;password&quot;</span> }\n  })\n\n  fireEvent.<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;loginTrigger&quot;</span>))\n\n  <span class=\"hljs-title function_\">expect</span>(store.<span class=\"hljs-title function_\">getActions</span>()).<span class=\"hljs-title function_\">toContainEqual</span>(<span class=\"hljs-title function_\">login</span>({ <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;user_one@gmail.com&quot;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&quot;password&quot;</span> }))\n})\n</code></pre>\n<p>Here, we submit the form using <code>fireEvent</code>. and we expect the list of actions (<code>getActions()</code>) of the store\nto contain login action with the right payload. This way we can simulate user behaviors and check if\nit calls correct action.</p>\n<h3 id=\"testingprops\">Testing Props</h3>\n<p>Most of the time, we want to change the UI based on the input props.\nTo do this, we can pass any state to the <code>renderComponent</code> and write assertions based on the expected behavior.</p>\n<p>For example, let's write two tests to see if we only render the loading indicator when <code>loading</code> is set to true.</p>\n<pre><code class=\"hljs tsx language-tsx\"><span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should show loading indicator when loading is set to true&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> [{ queryByTestId }] = <span class=\"hljs-title function_\">renderComponent</span>({ <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">true</span> } <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">ILoginState</span>)\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">queryByTestId</span>(<span class=\"hljs-string\">&quot;loader&quot;</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>()\n})\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should not show loading indicator when loading is set to false&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> [{ queryByTestId }] = <span class=\"hljs-title function_\">renderComponent</span>({ <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span> } <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">ILoginState</span>)\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">queryByTestId</span>(<span class=\"hljs-string\">&quot;loader&quot;</span>)).<span class=\"hljs-title function_\">toBeFalsy</span>()\n})\n</code></pre>\n<p>As you can see we just have to pass the current state that we want and write assertions accordingly.</p>\n<h3 id=\"testingeffects\">Testing Effects</h3>\n<p>The Login component has an effect that checks the prop <code>error</code> and set <code>showError</code>.\nTo test this, we have to change the inputs of the component. As our store cannot publish\na new state to the components, what we can do is to re-render the component with the new state.\nThis will update the props of the component and will run the effect.</p>\n<p>Let's write a test for this behavior.</p>\n<pre><code class=\"hljs tsx language-tsx\"><span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should show error if an error is available&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">renderComponent</span>({ <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span> })\n  <span class=\"hljs-keyword\">const</span> [{ getByTestId }] = <span class=\"hljs-title function_\">renderComponent</span>({\n    <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">&quot;something went wrong&quot;</span>\n  })\n\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;errorMessage&quot;</span>)).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">&quot;something went wrong&quot;</span>)\n})\n</code></pre>\n<p>Below is the complete test file for this component.</p>\n<pre><code class=\"hljs tsx language-tsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;@testing-library/jest-dom/extend-expect&quot;</span>\n<span class=\"hljs-keyword\">import</span> { cleanup, fireEvent, render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@testing-library/react&quot;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Provider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-redux&quot;</span>\n<span class=\"hljs-keyword\">import</span> configureStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;redux-mock-store&quot;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">LogIn</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./LogIn&quot;</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ILoginState</span>, login } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./state&quot;</span>\n\n<span class=\"hljs-keyword\">const</span> mockStore = <span class=\"hljs-title function_\">configureStore</span>([])\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;Login&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">renderComponent</span>(<span class=\"hljs-params\">state: ILoginState</span>) {\n    <span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">mockStore</span>(state)\n    <span class=\"hljs-keyword\">return</span> [\n      <span class=\"hljs-title function_\">render</span>(\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Provider</span> <span class=\"hljs-attr\">store</span>=<span class=\"hljs-string\">{store}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LogIn</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Provider</span>&gt;</span></span>\n      ),\n      store\n    ]\n  }\n\n  <span class=\"hljs-title function_\">afterAll</span>(cleanup)\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should dispatch login action if inputs are valid&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [{ getByTestId }, store] = <span class=\"hljs-title function_\">renderComponent</span>({\n      <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span>\n    })\n\n    fireEvent.<span class=\"hljs-title function_\">change</span>(<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;emailInput&quot;</span>), {\n      <span class=\"hljs-attr\">target</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;user_one@gmail.com&quot;</span> }\n    })\n\n    fireEvent.<span class=\"hljs-title function_\">change</span>(<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;passwordInput&quot;</span>), {\n      <span class=\"hljs-attr\">target</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;password&quot;</span> }\n    })\n\n    fireEvent.<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;loginTrigger&quot;</span>))\n\n    <span class=\"hljs-title function_\">expect</span>(store.<span class=\"hljs-title function_\">getActions</span>()).<span class=\"hljs-title function_\">toContainEqual</span>(<span class=\"hljs-title function_\">login</span>({ <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;user_one@gmail.com&quot;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&quot;password&quot;</span> }))\n  })\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should show loading indicator when loading is set to true&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [{ queryByTestId }] = <span class=\"hljs-title function_\">renderComponent</span>({\n      <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">true</span>\n    } <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">ILoginState</span>)\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">queryByTestId</span>(<span class=\"hljs-string\">&quot;loader&quot;</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>()\n  })\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should not show loading indicator when loading is set to false&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [{ queryByTestId }] = <span class=\"hljs-title function_\">renderComponent</span>({\n      <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>\n    } <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">ILoginState</span>)\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">queryByTestId</span>(<span class=\"hljs-string\">&quot;loader&quot;</span>)).<span class=\"hljs-title function_\">toBeFalsy</span>()\n  })\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should show error if an error is available&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">renderComponent</span>({ <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span> })\n    <span class=\"hljs-keyword\">const</span> [{ getByTestId }] = <span class=\"hljs-title function_\">renderComponent</span>({\n      <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">&quot;something went wrong&quot;</span>\n    })\n\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;errorMessage&quot;</span>)).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">&quot;something went wrong&quot;</span>)\n  })\n})\n</code></pre>"},"page":"Post","topTags":["programming","aws","web","machineLearning","react","javascript","dataScience","typescript","r","csharp"],"relatedPosts":[{"title":"React Form Validation Using Custom Hooks","tags":["web","programming","react","javascript"],"fullUrl":"https://rusith.me/blog/react-form-validation-using-custom-hooks","date":"Mon, Jun 24, 2019","description":"Form validation in react is bit tricky. This is an attempt to make it bit easy by using react hooks. here we write few custom hooks to create a re-usable validation logic that can be used in any form.","banner":null},{"title":"Deploying an app on AWS ECS with CDK","tags":["programming","nextJS","react","aws","ecs","typescript","cdk","devops"],"fullUrl":"https://rusith.me/blog/deploy-app-on-aws-ecs-with-cdk-auto-scaling-and-load-balancing","date":"Wed, Feb 15, 2023","description":"How to deploy an application on AWS ECS with load-balancing and auto-scaling using CDK by writing the CDK code in TypeScript","banner":"/post-data/2023-02-15-deploying-react-app-on-ecs/banner.png"},{"title":"A Service Gateway Using NodeJS","tags":["programming","javascript","micro-service","web"],"fullUrl":"https://rusith.me/blog/node-js-service-gateway","date":"Thu, Mar 15, 2018","description":"In this post I am writing a simple and minimal service gateway using JavaScript and NodeJS which can handle authentication , authorization.","banner":null}]},"__N_SSG":true}