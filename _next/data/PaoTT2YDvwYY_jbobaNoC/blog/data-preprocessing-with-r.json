{"pageProps":{"post":{"fileName":"2019-05-04-data-preprocessing-with-r.md","fullPath":"/home/runner/work/rusith.me/rusith.me/modules/blog/posts/2019-05-04-data-preprocessing-with-r.md","title":"Data Pre-Processing With R","tags":["machineLearning","dataScience","r"],"comments":true,"description":"Before feeding our dataSet into a machine learning algorithm it's absolutely necessary to pre-process the data where we should clean and re-shape our data to get the maximum performance from our machine learning models. In this post, I will go through a set of procedures which you can use to pre-process a data set.","dateCreated":"Sat May 04 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","dateModified":"Sat May 04 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","datePublished":"Sat May 04 2019 00:00:00 GMT+0000 (Coordinated Universal Time)","dependencies":"R","about":"Basic introduction on data pre-processing for machine learning using R","path":"/blog/data-preprocessing-with-r","oldPath":"/2019/05/04/data-preprocessing-with-r","dateCreatedFormatted":"Sat, May 4, 2019","fullUrl":"https://rusith.me/blog/data-preprocessing-with-r","fileContent":"---\ntitle: Data Pre-Processing With R\ntags: machineLearning dataScience r\ncomments: true\ndescription: Before feeding our dataSet into a machine learning algorithm it's absolutely necessary to pre-process the data where we should clean and re-shape our data to get the maximum performance from our machine learning models. In this post, I will go through a set of procedures which you can use to pre-process a data set.\ndateCreated: 2019-05-04\ndateModified: 2019-05-04\ndatePublished: 2019-05-04\ndependencies: R\nabout: Basic introduction on data pre-processing for machine learning using R\npath: /data-preprocessing-with-r\noldPath: /2019/05/04/data-preprocessing-with-r\n---\n\nBefore feeding our dataSet into a machine learning algorithm it's absolutely necessary to pre-process the data where we should clean and re-shape our data to get the maximum performance from our machine learning models. \n\nIn this post, I will go through a set of procedures which you can use to pre-process a data set.\n\nyou can download the data set that I am going to use in this post from  [Here]($$base_url/post-data/2019-05-04-data-preprocessing-with-r/dataSet.csv).\nDownload the file as `dataSet.csv` to a folder and set it as the working directory in your R editor\n\nThe data in this set are completely random and the data set has no real value. as we are only using it in pre-processing, that should not be a problem.\n\n\n### Loading the Data\n\nOkay, now we have the data file, now we need to read it in order to work with it.\n\n```R\n# This will load the SCV file into a data frame\ndata <- read.csv(\"dataSet.csv\")\n```\n\nNow we have the data set loaded into a variable we can go ahead with our pre-processing steps.\n\n## Dealing with Missing Data\n\nAs you can see in the data set, it has four cells which don't have any values in `Age` and `Salary` variables.\n\nIn both cases, we can replace the `NA` values with the mean of the variable.\n\nto do this we will write a function which will replace the `NA` values with the mean of the specific vector.\n\n```R\n# This will fix the NAs in the given vector (column)\nfixNa <- function (attribute) {\n  ifelse(is.na(attribute), mean(attribute, na.rm = TRUE), attribute)\n}\n\n# Now we can re-use the same function to fix NAs in both variables\ndata$Age <- fixNa(data$Age)\ndata$Income <- fixNa(data$Income)\n```\n\nOkay, now we have got rid of the missing values. if you check the data set now you can see the `NA` cells a are replaced by values `33.3` and `77539.6`\n\n## Dealing With Categorical Variables\n\nIn a data set, variables are divided into two types, numerical and categorical. in our data set there are two numerical variables which are `Age` and `Salary` and there are three categorical variables which are `Country`, `Gender` and `Married`. we can't use these categorical variables (string values) as is in a mathematical equation. so we will have to convert or encode them to numbers so we can use them in our algorithms. to do this we can use the `factor` function in R\n\n```R\nfactorCategories <- function (attr, zeroBased = FALSE) {\n  # we can reuse the same result\n  uniqueValues = unique(attr)\n  factor(attr, uniqueValues, seq(ifelse(zeroBased, 0, 1), \n                                 ifelse(zeroBased, length(uniqueValues) -1, length(uniqueValues))))\n}\n\ndata$Country <- factorCategories(data$Country)\ndata$Gender <- factorCategories(data$Gender, TRUE)\ndata$Married <- factorCategories(data$Married, TRUE)\n```\n\nHere again, we use a function to do the processing so we don't have to rewrite the same thing. the `factorCategories` will use the `factor` function to replace the categorical values with factors. with variables like `Gender` and `Married` which has only two possible values, we have used  0 based sequence to include 0.\n\n\n## Splitting the Model\n\nSo, now we have fixed the categorical values and we are ready to split the data set into two sets which are `training set` and `test set`. this step is necessary because, in order to evaluate the performance of our machine learning model, we need a separate set from our training set.\n\nwe are going to use the `caTools` R library to do this.\n\n```R\nlibrary(caTools) # Load caTools which will help to split the data set\nset.seed(12345)\n\n# Creating the input vector which will help the subset function to decide the set of a row\nsp <- sample.split(data$Married, SplitRatio = 0.8) # This sets the ratio of the training set\n\n# Now we can subset using split vector\ntrainingSet <- subset(data, sp == TRUE) # Include if the value is TRUE\ntestSet <- subset(data, sp == FALSE) # Include if the value is FALSE\n```\n\n## Feature Scaling\n\nIf you take a look at two numerical variables of the data set you can see that those are not on the same scale. the `Salary` column has much larger values than the `Age` column. this could cause problems in the machine learning model if we don't fix it. \na lot of machine learning models are based on the Euclidean Distance equation. so if we don't normalize the values, the salary will dominate the Euclidean Distance. \n\nthere are several ways of Feature scaling common ones are \n1. Standardization\n2. Normalization\n\nin Standardization, for each observation in each feature, you withdraw the mean value of all the values of the feature and divide it by the standard deviation.\n\nand in Normalization, you subtract your observation feature `x` by the minimum value of all feature values and divide it by the difference between the maximum of your feature values and the minimum of your feature values.\n\nWe can use the in-built `scale` function in R to do this.\n\n```R\ntrainingSet[, c(2,4)] = scale(trainingSet[, c(2,4)])\ntestSet[, c(2,4)] = scale(testSet[, c(2,4)])\n```\n\nwe have to select only the features in indexes 2 and 4 which are `Salary` and `Age`. we should not include the features which we converted to factors in the scaling set as they are not considered as numbers in R.\n\n\n## Wrap up\n\nOkay with feature scaling done, we have a simple and perfect data set that can be used in our machine learning models.\n\nbelow is the complete script that we built in this article.\n\n```R\n# This will load the SCV file into a data frame\ndata <- read.csv(\"dataSet.csv\")\n\n# This will fix the NAs in the given vector (column)\nfixNa <- function (attribute) {\n  ifelse(is.na(attribute), mean(attribute, na.rm = TRUE), attribute)\n}\n\n\n# Now we can re-use the same function to fix NAs in both variables\ndata$Age <- fixNa(data$Age)\ndata$Income <- fixNa(data$Income)\n\n\nfactorCategories <- function (attr, zeroBased = FALSE) {\n  # we can reuse the same result\n  uniqueValues = unique(attr)\n  factor(attr, uniqueValues, seq(ifelse(zeroBased, 0, 1), \n                                 ifelse(zeroBased, length(uniqueValues) -1, length(uniqueValues))))\n}\n\ndata$Country <- factorCategories(data$Country)\ndata$Gender <- factorCategories(data$Gender, TRUE)\ndata$Married <- factorCategories(data$Married, TRUE)\n\nlibrary(caTools) # Load caTools which will help to split the data set\nset.seed(12345)\n\n# Creating the input vector which will help the subset function to decide the set of a row\nsp <- sample.split(data$Married, SplitRatio = 0.8) # This sets the ratio of the training set\n\n# Now we can subset using split vector\ntrainingSet <- subset(data, sp == TRUE) # Include if the value is TRUE\ntestSet <- subset(data, sp == FALSE) # Include if the value is FALSE\n\n\ntrainingSet[, c(2,4)] = scale(trainingSet[, c(2,4)])\ntestSet[, c(2,4)] = scale(testSet[, c(2,4)])\n```\n","parsedContent":"<p>Before feeding our dataSet into a machine learning algorithm it's absolutely necessary to pre-process the data where we should clean and re-shape our data to get the maximum performance from our machine learning models. </p>\n<p>In this post, I will go through a set of procedures which you can use to pre-process a data set.</p>\n<p>you can download the data set that I am going to use in this post from  <a href=\"https://rusith.me/post-data/2019-05-04-data-preprocessing-with-r/dataSet.csv\">Here</a>.\nDownload the file as <code>dataSet.csv</code> to a folder and set it as the working directory in your R editor</p>\n<p>The data in this set are completely random and the data set has no real value. as we are only using it in pre-processing, that should not be a problem.</p>\n<h3 id=\"loadingthedata\">Loading the Data</h3>\n<p>Okay, now we have the data file, now we need to read it in order to work with it.</p>\n<pre><code class=\"hljs R language-R\"><span class=\"hljs-comment\"># This will load the SCV file into a data frame</span>\ndata <span class=\"hljs-operator\">&lt;-</span> read.csv<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">&quot;dataSet.csv&quot;</span><span class=\"hljs-punctuation\">)</span>\n</code></pre>\n<p>Now we have the data set loaded into a variable we can go ahead with our pre-processing steps.</p>\n<h2 id=\"dealingwithmissingdata\">Dealing with Missing Data</h2>\n<p>As you can see in the data set, it has four cells which don't have any values in <code>Age</code> and <code>Salary</code> variables.</p>\n<p>In both cases, we can replace the <code>NA</code> values with the mean of the variable.</p>\n<p>to do this we will write a function which will replace the <code>NA</code> values with the mean of the specific vector.</p>\n<pre><code class=\"hljs R language-R\"><span class=\"hljs-comment\"># This will fix the NAs in the given vector (column)</span>\nfixNa <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-punctuation\">(</span>attribute<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  ifelse<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">is.na</span><span class=\"hljs-punctuation\">(</span>attribute<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">,</span> mean<span class=\"hljs-punctuation\">(</span>attribute<span class=\"hljs-punctuation\">,</span> na.rm <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">,</span> attribute<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\n<span class=\"hljs-comment\"># Now we can re-use the same function to fix NAs in both variables</span>\ndata<span class=\"hljs-operator\">$</span>Age <span class=\"hljs-operator\">&lt;-</span> fixNa<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Age<span class=\"hljs-punctuation\">)</span>\ndata<span class=\"hljs-operator\">$</span>Income <span class=\"hljs-operator\">&lt;-</span> fixNa<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Income<span class=\"hljs-punctuation\">)</span>\n</code></pre>\n<p>Okay, now we have got rid of the missing values. if you check the data set now you can see the <code>NA</code> cells a are replaced by values <code>33.3</code> and <code>77539.6</code></p>\n<h2 id=\"dealingwithcategoricalvariables\">Dealing With Categorical Variables</h2>\n<p>In a data set, variables are divided into two types, numerical and categorical. in our data set there are two numerical variables which are <code>Age</code> and <code>Salary</code> and there are three categorical variables which are <code>Country</code>, <code>Gender</code> and <code>Married</code>. we can't use these categorical variables (string values) as is in a mathematical equation. so we will have to convert or encode them to numbers so we can use them in our algorithms. to do this we can use the <code>factor</code> function in R</p>\n<pre><code class=\"hljs R language-R\">factorCategories <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">attr</span><span class=\"hljs-punctuation\">,</span> zeroBased <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-comment\"># we can reuse the same result</span>\n  uniqueValues <span class=\"hljs-operator\">=</span> unique<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">attr</span><span class=\"hljs-punctuation\">)</span>\n  factor<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">attr</span><span class=\"hljs-punctuation\">,</span> uniqueValues<span class=\"hljs-punctuation\">,</span> seq<span class=\"hljs-punctuation\">(</span>ifelse<span class=\"hljs-punctuation\">(</span>zeroBased<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">,</span> \n                                 ifelse<span class=\"hljs-punctuation\">(</span>zeroBased<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>uniqueValues<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>uniqueValues<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\ndata<span class=\"hljs-operator\">$</span>Country <span class=\"hljs-operator\">&lt;-</span> factorCategories<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Country<span class=\"hljs-punctuation\">)</span>\ndata<span class=\"hljs-operator\">$</span>Gender <span class=\"hljs-operator\">&lt;-</span> factorCategories<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Gender<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span>\ndata<span class=\"hljs-operator\">$</span>Married <span class=\"hljs-operator\">&lt;-</span> factorCategories<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Married<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span>\n</code></pre>\n<p>Here again, we use a function to do the processing so we don't have to rewrite the same thing. the <code>factorCategories</code> will use the <code>factor</code> function to replace the categorical values with factors. with variables like <code>Gender</code> and <code>Married</code> which has only two possible values, we have used  0 based sequence to include 0.</p>\n<h2 id=\"splittingthemodel\">Splitting the Model</h2>\n<p>So, now we have fixed the categorical values and we are ready to split the data set into two sets which are <code>training set</code> and <code>test set</code>. this step is necessary because, in order to evaluate the performance of our machine learning model, we need a separate set from our training set.</p>\n<p>we are going to use the <code>caTools</code> R library to do this.</p>\n<pre><code class=\"hljs R language-R\">library<span class=\"hljs-punctuation\">(</span>caTools<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># Load caTools which will help to split the data set</span>\nset.seed<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">12345</span><span class=\"hljs-punctuation\">)</span>\n\n<span class=\"hljs-comment\"># Creating the input vector which will help the subset function to decide the set of a row</span>\nsp <span class=\"hljs-operator\">&lt;-</span> sample.split<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Married<span class=\"hljs-punctuation\">,</span> SplitRatio <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.8</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># This sets the ratio of the training set</span>\n\n<span class=\"hljs-comment\"># Now we can subset using split vector</span>\ntrainingSet <span class=\"hljs-operator\">&lt;-</span> subset<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-punctuation\">,</span> sp <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># Include if the value is TRUE</span>\ntestSet <span class=\"hljs-operator\">&lt;-</span> subset<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-punctuation\">,</span> sp <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># Include if the value is FALSE</span>\n</code></pre>\n<h2 id=\"featurescaling\">Feature Scaling</h2>\n<p>If you take a look at two numerical variables of the data set you can see that those are not on the same scale. the <code>Salary</code> column has much larger values than the <code>Age</code> column. this could cause problems in the machine learning model if we don't fix it. \na lot of machine learning models are based on the Euclidean Distance equation. so if we don't normalize the values, the salary will dominate the Euclidean Distance. </p>\n<p>there are several ways of Feature scaling common ones are </p>\n<ol>\n<li>Standardization</li>\n<li>Normalization</li>\n</ol>\n<p>in Standardization, for each observation in each feature, you withdraw the mean value of all the values of the feature and divide it by the standard deviation.</p>\n<p>and in Normalization, you subtract your observation feature <code>x</code> by the minimum value of all feature values and divide it by the difference between the maximum of your feature values and the minimum of your feature values.</p>\n<p>We can use the in-built <code>scale</code> function in R to do this.</p>\n<pre><code class=\"hljs R language-R\">trainingSet<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> scale<span class=\"hljs-punctuation\">(</span>trainingSet<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\ntestSet<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> scale<span class=\"hljs-punctuation\">(</span>testSet<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n</code></pre>\n<p>we have to select only the features in indexes 2 and 4 which are <code>Salary</code> and <code>Age</code>. we should not include the features which we converted to factors in the scaling set as they are not considered as numbers in R.</p>\n<h2 id=\"wrapup\">Wrap up</h2>\n<p>Okay with feature scaling done, we have a simple and perfect data set that can be used in our machine learning models.</p>\n<p>below is the complete script that we built in this article.</p>\n<pre><code class=\"hljs R language-R\"><span class=\"hljs-comment\"># This will load the SCV file into a data frame</span>\ndata <span class=\"hljs-operator\">&lt;-</span> read.csv<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">&quot;dataSet.csv&quot;</span><span class=\"hljs-punctuation\">)</span>\n\n<span class=\"hljs-comment\"># This will fix the NAs in the given vector (column)</span>\nfixNa <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-punctuation\">(</span>attribute<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  ifelse<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">is.na</span><span class=\"hljs-punctuation\">(</span>attribute<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">,</span> mean<span class=\"hljs-punctuation\">(</span>attribute<span class=\"hljs-punctuation\">,</span> na.rm <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">,</span> attribute<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\n\n<span class=\"hljs-comment\"># Now we can re-use the same function to fix NAs in both variables</span>\ndata<span class=\"hljs-operator\">$</span>Age <span class=\"hljs-operator\">&lt;-</span> fixNa<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Age<span class=\"hljs-punctuation\">)</span>\ndata<span class=\"hljs-operator\">$</span>Income <span class=\"hljs-operator\">&lt;-</span> fixNa<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Income<span class=\"hljs-punctuation\">)</span>\n\n\nfactorCategories <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">attr</span><span class=\"hljs-punctuation\">,</span> zeroBased <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-comment\"># we can reuse the same result</span>\n  uniqueValues <span class=\"hljs-operator\">=</span> unique<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">attr</span><span class=\"hljs-punctuation\">)</span>\n  factor<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">attr</span><span class=\"hljs-punctuation\">,</span> uniqueValues<span class=\"hljs-punctuation\">,</span> seq<span class=\"hljs-punctuation\">(</span>ifelse<span class=\"hljs-punctuation\">(</span>zeroBased<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">,</span> \n                                 ifelse<span class=\"hljs-punctuation\">(</span>zeroBased<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>uniqueValues<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>uniqueValues<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\ndata<span class=\"hljs-operator\">$</span>Country <span class=\"hljs-operator\">&lt;-</span> factorCategories<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Country<span class=\"hljs-punctuation\">)</span>\ndata<span class=\"hljs-operator\">$</span>Gender <span class=\"hljs-operator\">&lt;-</span> factorCategories<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Gender<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span>\ndata<span class=\"hljs-operator\">$</span>Married <span class=\"hljs-operator\">&lt;-</span> factorCategories<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Married<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span>\n\nlibrary<span class=\"hljs-punctuation\">(</span>caTools<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># Load caTools which will help to split the data set</span>\nset.seed<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">12345</span><span class=\"hljs-punctuation\">)</span>\n\n<span class=\"hljs-comment\"># Creating the input vector which will help the subset function to decide the set of a row</span>\nsp <span class=\"hljs-operator\">&lt;-</span> sample.split<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-operator\">$</span>Married<span class=\"hljs-punctuation\">,</span> SplitRatio <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.8</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># This sets the ratio of the training set</span>\n\n<span class=\"hljs-comment\"># Now we can subset using split vector</span>\ntrainingSet <span class=\"hljs-operator\">&lt;-</span> subset<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-punctuation\">,</span> sp <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># Include if the value is TRUE</span>\ntestSet <span class=\"hljs-operator\">&lt;-</span> subset<span class=\"hljs-punctuation\">(</span>data<span class=\"hljs-punctuation\">,</span> sp <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># Include if the value is FALSE</span>\n\n\ntrainingSet<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> scale<span class=\"hljs-punctuation\">(</span>trainingSet<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\ntestSet<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> scale<span class=\"hljs-punctuation\">(</span>testSet<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n</code></pre>"},"page":"Post","topTags":["programming","aws","web","machineLearning","react","javascript","dataScience","typescript","r","csharp"],"relatedPosts":[{"title":"Simple Linear Regression With R","tags":["machineLearning","dataScience","r"],"fullUrl":"https://rusith.me/blog/simple-linear-regression-with-r","date":"Tue, May 7, 2019","description":"Regression models are used to predict real values such as salary, spending, income. Simple linear regression is a model of regression which is used to identify the correlation between two variables and possibly predict the dependent variable by using the independent variable.This will enable us to establish a relationship between two attributes such as Income and Spending and we can use what we know about the relationship to forecast unobserved values.","banner":null},{"title":"Multiple Linear Regression With Python","tags":["machineLearning","dataScience","python"],"fullUrl":"https://rusith.me/blog/multiple-linear-regression-python","date":"Tue, Jun 18, 2019","description":"Regression is a machine learning model which we can use to predict values by using previously observed data. In simple linear regression, we had to use only one independent variable for the prediction. but in the real world often a dependent variable is dependent upon several variables.","banner":null},{"title":"The Essence of Machine Learning","tags":["machineLearning"],"fullUrl":"https://rusith.me/blog/the-essence-of-machine-learning","date":"Tue, May 7, 2019","description":"Machine learning can significantly improve the performance of a system. This could be very beneficial for businesses or any other application. So if someone comes to you and suggest you a business idea that involves machine learning, how do you decide that a machine learning implementation is feasible with the particular idea?","banner":null}]},"__N_SSG":true}